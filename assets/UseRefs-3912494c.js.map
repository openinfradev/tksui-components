{"version":3,"file":"UseRefs-3912494c.js","sources":["../../src/common/validator/TValidatorRule.ts","../../src/common/hook/UseRefs.ts"],"sourcesContent":["export default {\n\n    requiredArr(errorMessage?: string) {\n        return (v: any[]) => (v.length > 0 || errorMessage) ?? '1개 이상 선택해 주세요';\n    },\n    required(errorMessage?: string) {\n        return (v: string | number) => (!!v || errorMessage) ?? '값을 입력해 주세요';\n    },\n    lengthMin(min: number, errorMessage?: string) {\n        return (v: string) => (v.length >= min || errorMessage) ?? `${min}자 이상 입력해 주세요`;\n    },\n    lengthMax(max: number, errorMessage?: string) {\n        return (v: string) => (v.length <= max || errorMessage) ?? `${max}자 이내로 입력해 주세요`;\n    },\n    lengthBetween(min: number, max: number, errorMessage?: string) {\n        return (v: string) => ((v.length >= min && v.length <= max) || errorMessage) ?? `${min}-${max}자 사이로 입력해 주세요`;\n    },\n    valueMin(min: number, errorMessage?: string) {\n        return (v: string) => (Number.parseInt(v, 10) >= min || errorMessage) ?? `${min} 이상으로 입력해 주세요`;\n    },\n    valueMax(max: number, errorMessage?: string) {\n        return (v: string) => (Number.parseInt(v, 10) <= max || errorMessage) ?? `${max} 이하로 입력해 주세요`;\n    },\n    valueBetween(min: number, max: number, errorMessage?: string) {\n        return (v: string) => ((Number.parseInt(v, 10) >= min && Number.parseInt(v, 10) <= max) || errorMessage)\n            ?? `${min}-${max} 사이로 입력해 주세요`;\n    },\n    valueSpecified(values: number[], errorMessage?: string) {\n        return (v: string) => (values.some((value) => value === Number.parseInt(v, 10)) || errorMessage)\n            ?? `[${values.join(', ')}] 중 선택해 주세요`;\n    },\n    equal(value: any, errorMessage?: string) {\n        return (v: string) => (v === value || errorMessage) ?? '올바른 값을 입력해 주세요';\n    },\n    email(errorMessage?: string) {\n        const regexp = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n        return (v: string) => (regexp.test(v) || errorMessage) ?? '올바른 형태의 이메일을 입력해 주세요';\n    },\n    regexp(regexp: RegExp, errorMessage?: string) {\n        return (v: string) => (regexp.test(v) || errorMessage) ?? '값을 규칙에 맞게 입력해 주세요';\n    },\n};\n","import {MutableRefObject, useRef} from 'react';\n\n\nexport default function useRefs<T = any>(count: number) {\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const refs: MutableRefObject<T>[] = [];\n\n    for (let i = 0; i < count; i++) {\n\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        refs.push(useRef(null));\n    }\n\n\n    return refs;\n}\n"],"names":["TValidatorRule","errorMessage","v","min","max","values","value","regexp","useRefs","count","refs","i","useRef"],"mappings":"wCAAA,MAAeA,EAAA,CAEX,YAAYC,EAAuB,CAC/B,OAAQC,IAAcA,EAAE,OAAS,GAAKD,IAAiB,eAC3D,EACA,SAASA,EAAuB,CAC5B,OAAQC,IAAwB,CAAC,CAACA,GAAKD,IAAiB,YAC5D,EACA,UAAUE,EAAaF,EAAuB,CAC1C,OAAQC,IAAeA,EAAE,QAAUC,GAAOF,IAAiB,GAAGE,CAAG,cACrE,EACA,UAAUC,EAAaH,EAAuB,CAC1C,OAAQC,IAAeA,EAAE,QAAUE,GAAOH,IAAiB,GAAGG,CAAG,eACrE,EACA,cAAcD,EAAaC,EAAaH,EAAuB,CAC3D,OAAQC,IAAgBA,EAAE,QAAUC,GAAOD,EAAE,QAAUE,GAAQH,IAAiB,GAAGE,CAAG,IAAIC,CAAG,eACjG,EACA,SAASD,EAAaF,EAAuB,CAClC,OAACC,IAAe,OAAO,SAASA,EAAG,EAAE,GAAKC,GAAOF,IAAiB,GAAGE,CAAG,eACnF,EACA,SAASC,EAAaH,EAAuB,CAClC,OAACC,IAAe,OAAO,SAASA,EAAG,EAAE,GAAKE,GAAOH,IAAiB,GAAGG,CAAG,cACnF,EACA,aAAaD,EAAaC,EAAaH,EAAuB,CAC1D,OAAQC,IAAgB,OAAO,SAASA,EAAG,EAAE,GAAKC,GAAO,OAAO,SAASD,EAAG,EAAE,GAAKE,GAAQH,IACpF,GAAGE,CAAG,IAAIC,CAAG,cACxB,EACA,eAAeC,EAAkBJ,EAAuB,CACpD,OAAQC,IAAeG,EAAO,KAAMC,GAAUA,IAAU,OAAO,SAASJ,EAAG,EAAE,CAAC,GAAKD,IAC5E,IAAII,EAAO,KAAK,IAAI,CAAC,aAChC,EACA,MAAMC,EAAYL,EAAuB,CACrC,OAAQC,IAAeA,IAAMI,GAASL,IAAiB,gBAC3D,EACA,MAAMA,EAAuB,CACzB,MAAMM,EAAS,mDACf,OAAQL,IAAeK,EAAO,KAAKL,CAAC,GAAKD,IAAiB,sBAC9D,EACA,OAAOM,EAAgBN,EAAuB,CAC1C,OAAQC,IAAeK,EAAO,KAAKL,CAAC,GAAKD,IAAiB,mBAC9D,CACJ,ECtCA,SAAwBO,EAAiBC,EAAe,CAGpD,MAAMC,EAA8B,CAAA,EAEpC,QAASC,EAAI,EAAGA,EAAIF,EAAOE,IAGlBD,EAAA,KAAKE,SAAO,IAAI,CAAC,EAInB,OAAAF,CACX"}