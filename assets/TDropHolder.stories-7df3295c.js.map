{"version":3,"file":"TDropHolder.stories-7df3295c.js","sources":["../../src/components/data-container/drop-holder/TDropHolder.tsx"],"sourcesContent":["import {\n    CSSProperties,\n    ForwardedRef,\n    forwardRef,\n    MouseEvent,\n    MouseEventHandler,\n    ReactNode,\n    useCallback, useImperativeHandle,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport {DropHolderAlignment, TDropHolderItem, TDropHolderProps, TDropHolderRef} from './TDropHolder.interface';\nimport useClickOutside from '@/common/hook/UseClickOutside';\n\n\nconst TDropHolder = forwardRef((props: TDropHolderProps, ref: ForwardedRef<TDropHolderRef>) => {\n\n    // region [Hooks]\n\n    const [isOpened, setIsOpened] = useState(false);\n    const rootRef = useRef<HTMLDivElement>(null);\n    useClickOutside(rootRef, () => close());\n\n\n    useImperativeHandle(ref, () => ({\n        open() { open(); },\n        close() { close(); },\n    }));\n\n    // endregion\n\n\n    // region [Styles]\n\n    const rootClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.className) { clazz.push(props.className); }\n        if (isOpened) { clazz.push('t-drop-holder--open'); }\n\n        return clazz.join(' ');\n    }, [props.className, isOpened]);\n\n    const itemClass = useCallback((item: TDropHolderItem): string => {\n        const clazz: string[] = [];\n\n        if (item.disabled) { clazz.push('t-drop-holder__items__item--disabled'); }\n        if (item.divideSection) { clazz.push('t-drop-holder__items__item--divider'); }\n\n        return clazz.join(' ');\n    }, []);\n\n\n    const rootStyle = useMemo((): CSSProperties => {\n\n        let style: CSSProperties = {};\n\n        if (props.style) style = {...style, ...props.style};\n\n        return style;\n    }, [props.style]);\n\n\n    const anchorStyle = useMemo((): CSSProperties => {\n        if (props.alignment === 'top-left') { return {top: `calc(0px - ${props.offset})`, left: '0'}; }\n        if (props.alignment === 'top-center') { return {top: `calc(0px - ${props.offset})`, left: '50%'}; }\n        if (props.alignment === 'top-right') { return {top: `calc(0px - ${props.offset})`, right: '0'}; }\n        if (props.alignment === 'bottom-left') { return {top: `calc(100% + ${props.offset})`, left: '0'}; }\n        if (props.alignment === 'bottom-center') { return {top: `calc(100% + ${props.offset})`, left: '50%'}; }\n        if (props.alignment === 'bottom-right') { return {top: `calc(100% + ${props.offset})`, right: '0'}; }\n\n        return {top: '100%', right: '0'}; // bottom-center\n    }, [props.alignment, props.offset]);\n\n    const itemsStyle = useMemo((): CSSProperties => {\n        if (props.alignment === 'top-left') { return {transform: 'translateY(-100%) translateX(0)'}; }\n        if (props.alignment === 'top-center') { return {transform: 'translateY(-100%) translateX(-50%)'}; }\n        if (props.alignment === 'top-right') { return {transform: 'translateY(-100%) translateX(-100%)'}; }\n        if (props.alignment === 'bottom-left') { return {transform: 'translateX(0)'}; }\n        if (props.alignment === 'bottom-center') { return {transform: 'translateX(-50%)'}; }\n        if (props.alignment === 'bottom-right') { return {transform: 'translateX(-100%)'}; }\n\n        return {transform: 'translateX(-50%)'}; // bottom-center\n    }, [props.alignment]);\n\n    // endregion\n\n\n    // region [Events]\n\n    const onClickRoot = (): void => {\n        if (isOpened) {\n            close();\n        } else {\n            open();\n        }\n    };\n\n    const onClickItem = (event: MouseEvent, handler: MouseEventHandler): void => {\n        event.stopPropagation();\n        if (handler) { handler(event); }\n        close();\n    };\n\n    // endregion\n\n\n    // region [Privates]\n\n    const open = (): void => {\n        setIsOpened(true);\n    };\n\n    const close = (): void => {\n        setIsOpened(false);\n    };\n\n    // endregion\n\n\n    // region [Templates]\n\n\n    const getItemTemplate = useCallback((item: TDropHolderItem): ReactNode => {\n        if (item.itemTemplate) {\n            return item.itemTemplate(item);\n        }\n        if (props.itemTemplate) {\n            return props.itemTemplate(item);\n        }\n        return (<div>{item[props.textKey]}</div>);\n    }, [props]);\n\n    // endregion\n\n    return (\n        <div className={`t-drop-holder ${rootClass}`}\n             style={rootStyle}\n             ref={rootRef}\n             onClick={onClickRoot}>\n            <div className={'t-drop-holder__anchor'} style={anchorStyle}>\n                {\n                    isOpened && (\n                        !props.customItem ? (\n                            <div className={'t-drop-holder__items'} style={itemsStyle}>\n                                {\n                                    props.items?.map((item, index) => (\n                                        <div key={index}\n                                             className={`t-drop-holder__items__item ${itemClass(item)}`}\n                                             onClick={(event) => onClickItem(event, item.onClick)}\n                                        >\n                                            {getItemTemplate(item)}\n                                        </div>\n                                    ))\n                                }\n                            </div>\n                        ) : (\n                            <div className={'t-drop-holder__items t-drop-holder__items--custom'} style={itemsStyle}>\n                                {\n                                    props.customItem\n                                }\n                            </div>\n                        )\n\n                    )\n                }\n            </div>\n            <div className={'t-drop-holder__holder'}>\n                {props.children}\n            </div>\n        </div>\n    );\n\n});\n\nTDropHolder.defaultProps = {\n    alignment: 'bottom-center' as DropHolderAlignment,\n    textKey: 'text',\n    offset: '4px',\n};\n\nTDropHolder.displayName = 'TDropHolder';\n\n\nexport default TDropHolder;\n"],"names":["TDropHolder","forwardRef","props","ref","isOpened","setIsOpened","useState","rootRef","useRef","useClickOutside","close","useImperativeHandle","open","rootClass","useMemo","clazz","itemClass","useCallback","item","rootStyle","style","anchorStyle","itemsStyle","onClickRoot","onClickItem","event","handler","getItemTemplate","jsx","jsxs","_a","index"],"mappings":"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"}