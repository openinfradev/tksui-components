{"version":3,"file":"TStepBox.stories-ac6cc956.js","sources":["../../src/components/data-container/step-box/TStepBoxContext.ts","../../src/components/data-container/step-box/TStepBoxFooter.tsx","../../src/components/data-container/step-box/TStepBoxHeader.tsx","../../src/components/data-container/step-box/TStepBox.tsx","../../src/components/data-container/step-box/TStepBoxItem.tsx"],"sourcesContent":["import {createContext} from 'react';\nimport {TStepBoxValue} from './TStepBox.interface';\n\ntype stepBoxContext = {\n    totalStep: number,\n    currentStep: TStepBoxValue,\n    onChangeCurrentStep: (step: number) => void,\n}\n\nexport const tabBoxContext = createContext<stepBoxContext>(\n    {\n        totalStep: 0,\n        currentStep: 0,\n        onChangeCurrentStep: null,\n    },\n);\n\nexport default tabBoxContext;\n","import {useCallback, useContext, useMemo} from 'react';\nimport {TStepBoxFooterProps} from './TStepBox.interface';\nimport TButton from '~/button/button/TButton';\nimport TStepBoxContext from '~/data-container/step-box/TStepBoxContext';\n\nconst TStepBoxFooter = (props: TStepBoxFooterProps) => {\n\n    // region [Hooks]\n\n    const context = useContext(TStepBoxContext);\n\n    // endregion\n\n\n    // region [Privates]\n\n    const currentStepContent = useMemo(() => {\n        return (\n            props.content.filter(\n                (item) => item.stepNumber === context.currentStep,\n            )\n        )[0];\n    }, [context.currentStep, props.content]);\n\n    const validateStep = useCallback(() => {\n        if (!currentStepContent.validateStep) {\n            return true;\n        }\n\n        return currentStepContent.validateStep();\n    }, [currentStepContent]);\n\n\n    // endregion\n\n\n    // region [Events]\n\n    const onClickPrev = useCallback(() => {\n        context.onChangeCurrentStep(context.currentStep - 1);\n    }, [context]);\n\n    const onClickNext = useCallback(() => {\n        if (!validateStep()) {\n            return;\n        }\n\n        if (context.currentStep < context.totalStep) {\n            context.onChangeCurrentStep(context.currentStep + 1);\n        }\n    }, [context, validateStep]);\n\n    // endregion\n\n    // region [Templates]\n\n    // endregion\n\n\n    return (\n        <div className={'t-step-box-footer'}>\n            <div className={'t-step-box-footer__left-action'}>\n                <TButton large disabled={context.currentStep === 1} onClick={onClickPrev}>{props.prevButtonLabel}</TButton>\n            </div>\n            <div className={'t-step-box-footer__right-action'}>\n                {\n                    currentStepContent.customNextButton\n                        ? currentStepContent.customNextButton\n                        : <TButton large onClick={onClickNext}>\n                            {\n                                (context.currentStep < context.totalStep)\n                                    ? props.nextButtonLabel\n                                    : props.completeButtonLabel\n                            }\n                        </TButton>\n                }\n            </div>\n        </div>\n    );\n};\n\n\nexport default TStepBoxFooter;\n","import {useCallback, useContext} from 'react';\nimport {TStepBoxHeaderProps} from './TStepBox.interface';\nimport TStepBoxContext from './TStepBoxContext';\nimport TIcon from '~/icon/TIcon';\n\nconst TStepBoxHeader = (props: TStepBoxHeaderProps) => {\n\n    // region [Hooks]\n\n    const context = useContext(TStepBoxContext);\n\n    // endregion\n\n\n    // region [Templates]\n\n    const numberClass = useCallback((stepNumber: number): string => {\n        const clazz: string[] = [];\n\n        if (stepNumber < context.currentStep) {\n            clazz.push('t-step-box-header__step__number--prev');\n        } else if (stepNumber === context.currentStep) {\n            clazz.push('t-step-box-header__step__number--current');\n        } else {\n            clazz.push('t-step-box-header__step__number--next');\n        }\n\n        return clazz.join(' ');\n    }, [context.currentStep]);\n\n    const connectorClass = useCallback((stepNumber: number): string => {\n        const clazz: string[] = [];\n\n        if (stepNumber < context.currentStep) {\n            clazz.push('t-step-box-header__connector--prev');\n        } else if (stepNumber === context.currentStep) {\n            clazz.push('t-step-box-header__connector--current');\n        } else {\n            clazz.push('t-step-box-header__connector--next');\n        }\n\n        return clazz.join(' ');\n    }, [context.currentStep]);\n\n    // endregion\n\n\n    // region [Events]\n\n\n    // endregion\n\n    return (\n\n        <ul className={'t-step-box-header'}>\n            {\n                props.content.map((item, index) => {\n                    return (<>\n                        {\n                            (index > 0) && (\n                                <div className={`t-step-box-header__connector ${connectorClass(item.stepNumber)}`}/>\n                            )\n                        }\n\n                        <li key={item.stepNumber} className={'t-step-box-header__step'}>\n\n                            <div className={`t-step-box-header__step__number ${numberClass(item.stepNumber)}`}>\n                                {/* Number */}\n                                <div className={'t-step-box-header__step__number__inner'}>\n                                    {\n                                        (item.stepNumber < context.currentStep)\n                                            ? <TIcon size={'xlarge'}>t_done</TIcon>\n                                            : item.stepNumber\n                                    }\n                                </div>\n\n                                {/* Label */}\n                                <div className={'t-step-box-header__step__label'}>{item.label}</div>\n                            </div>\n\n                        </li>\n                    </>\n                    );\n                })\n            }\n        </ul>\n\n    );\n};\n\nTStepBoxHeader.defaultProps = {};\n\nTStepBoxHeader.displayName = 'TStepBox';\n\n\nexport default TStepBoxHeader;\n","import {CSSProperties, ReactElement, useMemo} from 'react';\nimport {TStepBoxProps} from './TStepBox.interface';\nimport TStepBoxContext from './TStepBoxContext';\nimport TStepBoxFooter from '~/data-container/step-box/TStepBoxFooter';\nimport TStepBoxHeader from '~/data-container/step-box/TStepBoxHeader';\n\nconst TStepBox = (props: TStepBoxProps) => {\n\n    // region [Hooks]\n\n    const {value, children, style, className} = props;\n\n    // endregion\n\n    const headerContent = useMemo(() => {\n        return children.map(\n            (child: ReactElement, index: number) => ({\n                stepNumber: index + 1,\n                label: child.props.label,\n            }),\n        );\n    }, [children]);\n\n\n    const footerContent = useMemo(() => {\n        return children.map(\n            (child: ReactElement, index: number) => ({\n                stepNumber: index + 1,\n                onClickNext: child.props.onClickNext,\n                onClickPrev: child.props.onClickPrev,\n                validateStep: child.props.validateStep,\n                customNextButton: child.props.customNextButton,\n            }),\n        );\n    }, [children]);\n\n    // region [Privates]\n\n\n    // endregion\n\n\n    // region [Templates]\n\n    const rootClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (className) { clazz.push(className); }\n\n        return clazz.join(' ');\n    }, [className]);\n\n    const rootStyle = useMemo((): CSSProperties => {\n        if (style) { return style; }\n        return {};\n    }, [style]);\n\n    const stepItemContent = useMemo(() => children\n        .filter(\n            (child, index) => {\n                if (child.props.value) {\n                    return child.props.value === value;\n                }\n                return (index + 1) === value;\n            },\n        )[0]?.props.content, [children, value]);\n\n    // endregion\n\n    return (\n        <div className={`t-step-box ${rootClass}`} style={rootStyle}>\n            <TStepBoxContext.Provider value={\n                {\n                    currentStep: value,\n                    totalStep: children.length,\n                    onChangeCurrentStep: props.onChange,\n                }\n            }>\n                {/* Header */}\n                <TStepBoxHeader content={headerContent}/>\n\n                {/* Content */}\n                <div className={'t-step-box__tab-content t-tab-item-content'}>\n                    {stepItemContent}\n                </div>\n\n                {/* Footer */}\n                <TStepBoxFooter prevButtonLabel={props.prevButtonLabel}\n                                nextButtonLabel={props.nextButtonLabel}\n                                completeButtonLabel={props.completeButtonLabel}\n                                content={footerContent}\n                />\n            </TStepBoxContext.Provider>\n        </div>\n    );\n};\n\nTStepBox.defaultProps = {};\n\nTStepBox.displayName = 'TStepBox';\n\n\nexport default TStepBox;\n","import {TStepBoxItemProps} from './TStepBox.interface';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst TStepBoxItem = (props: TStepBoxItemProps) => {\n    return (<></>);\n};\n\n\nexport default TStepBoxItem;\n"],"names":["tabBoxContext","createContext","TStepBoxFooter","props","context","useContext","TStepBoxContext","currentStepContent","useMemo","item","validateStep","useCallback","onClickPrev","onClickNext","jsxs","jsx","TButton","TStepBoxHeader","numberClass","stepNumber","clazz","connectorClass","index","Fragment","TIcon","TStepBox","value","children","style","className","headerContent","child","footerContent","rootClass","rootStyle","stepItemContent","_a","TStepBoxItem"],"mappings":"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"}