{"version":3,"file":"TChip-efa6efdb.js","sources":["../../src/components/input/chip/TChip.interface.ts","../../src/components/input/chip/TChip.tsx"],"sourcesContent":["import {MouseEvent, ReactNode} from 'react';\nimport {TBaseProps} from '@/common/base/TBase.interface';\n\n\nexport const chipSize = {xsm: 'xsmall', sm: 'small', md: 'medium', lg: 'large', xlg: 'xlarge'};\ntype chipSize = typeof chipSize[keyof typeof chipSize];\nconst chipType = ['outlined', 'filled'] as const;\ntype chipType = typeof chipType[number];\n\n\nexport interface TChipProps extends TBaseProps {\n    \n    children?: ReactNode,\n    \n    type?: chipType,\n    \n    primary?: boolean,\n    icon?: string,\n    removeIcon?: string,\n    \n    size?: chipSize,\n    xsmall?: boolean,\n    small?: boolean,\n    medium?: boolean,\n    large?: boolean,\n    xlarge?: boolean,\n    \n    onRemove?: (event?: MouseEvent) => void,\n}\n\n\nexport interface TChipRef {\n    remove(): void,\n}\n","import {CSSProperties, forwardRef, MouseEvent, Ref, useImperativeHandle, useMemo, useRef} from 'react';\nimport {chipSize, TChipProps, TChipRef} from './TChip.interface';\nimport TIcon from '../../icon/TIcon';\n\n\nconst TChip = forwardRef((props: TChipProps, ref: Ref<TChipRef>) => {\n    \n    // region [Hooks]\n    \n    const rootRef = useRef<HTMLDivElement>(null);\n    \n    useImperativeHandle(ref, () => ({\n        remove() { onClickRemove(); },\n    }));\n    \n    // endregion\n    \n    \n    // region [Styles]\n    \n    const $_size = useMemo(() => {\n        if (props.size) { return props.size; }\n        if (props.xsmall) { return chipSize.xsm; }\n        if (props.small) { return chipSize.sm; }\n        if (props.medium) { return chipSize.md; }\n        if (props.large) { return chipSize.lg; }\n        if (props.xlarge) { return chipSize.xlg; }\n        return chipSize.md;\n    }, [props.size, props.xsmall, props.small, props.medium, props.large, props.xlarge]);\n    \n    const rootClass = useMemo((): string => {\n        const clazz: string[] = [];\n    \n        clazz.push(`t-chip--${$_size}`);\n        \n        if (props.type === 'outlined') { clazz.push('t-chip--outlined'); }\n        if (props.type === 'filled') { clazz.push('t-chip--filled'); }\n        if (props.primary) { clazz.push('t-chip--primary'); }\n        if (props.className) { clazz.push(props.className); }\n        \n        return clazz.join(' ');\n    }, [$_size, props.type, props.primary, props.className]);\n    \n    \n    const rootStyle = useMemo((): CSSProperties => props.style, [props.style]);\n    \n    // endregion\n    \n    \n    // region [Events]\n    \n    const onClickRemove = (event?: MouseEvent) => {\n        props.onRemove(event);\n    };\n    \n    // endregion\n    \n    \n    // region [ETC]\n    \n    \n    // endregion\n    \n    \n    // region [Templates]\n    \n    const deleteIconStyle: CSSProperties = useMemo(() => {\n        \n        if ($_size === 'xsmall') { return {fontSize: '12px'}; }\n        if ($_size === 'small') { return {fontSize: '14px'}; }\n        if ($_size === 'medium') { return {fontSize: '16px'}; }\n        if ($_size === 'large') { return {fontSize: '20px'}; }\n        if ($_size === 'xlarge') { return {fontSize: '24px'}; }\n        return {fontSize: '16px'};\n    }, [$_size]);\n    \n    \n    return (\n        <div ref={rootRef}\n             className={`t-chip ${rootClass}`}\n             onClick={(event) => event.stopPropagation()}\n             style={rootStyle}>\n    \n            {\n                props.icon && (\n                    <TIcon type={'filled'}\n                           className={'t-chip__prev-icon'}\n                           style={deleteIconStyle}>{props.icon}</TIcon>\n                )\n            }\n            \n            <div className={'t-chip__label'}>{props.children}</div>\n        \n            {\n                !!props.onRemove && (\n                    <TIcon type={'filled'}\n                           className={'t-chip__remove-icon'}\n                           style={deleteIconStyle}\n                           clickable\n                           onClick={(event) => onClickRemove(event)}\n                    >{props.removeIcon}</TIcon>\n                )\n            }\n        </div>\n    );\n    \n    // endregion\n    \n    \n});\n\nTChip.defaultProps = {\n    type: 'filled',\n    removeIcon: 'cancel',\n};\n\nTChip.displayName = 'TChip';\n\n\nexport default TChip;\n"],"names":["chipSize","TChip","forwardRef","props","ref","rootRef","useRef","useImperativeHandle","onClickRemove","$_size","useMemo","rootClass","clazz","rootStyle","event","deleteIconStyle","jsxs","jsx","TIcon"],"mappings":"8HAIa,MAAAA,EAAW,CAAC,IAAK,SAAU,GAAI,QAAS,GAAI,SAAU,GAAI,QAAS,IAAK,QAAQ,ECC7FC,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,CAII,MAAAC,EAAAC,SAAA,IAAA,EAEAC,EAAA,oBAAAH,EAAA,KAAA,CAAgC,QAAA,CACjBI,GAAc,CAAG,EAAA,EAQhC,MAAAC,EAAAC,EAAAA,QAAA,IACIP,EAAA,KAAkBA,EAAA,KAClBA,EAAA,OAAoBH,EAAA,IACpBG,EAAA,MAAmBH,EAAA,GACnBG,EAAA,OAAoBH,EAAA,GACpBG,EAAA,MAAmBH,EAAA,GACnBG,EAAA,OAAoBH,EAAA,IACpBA,EAAA,GAAgB,CAAAG,EAAA,KAAAA,EAAA,OAAAA,EAAA,MAAAA,EAAA,OAAAA,EAAA,MAAAA,EAAA,MAAA,CAAA,EAGpBQ,EAAAD,EAAAA,QAAA,IAAA,CACI,MAAAE,EAAA,CAAA,EAEA,OAAAA,EAAA,KAAA,WAAAH,CAAA,EAAA,EAEAN,EAAA,OAAA,YAAiCS,EAAA,KAAA,kBAAA,EACjCT,EAAA,OAAA,UAA+BS,EAAA,KAAA,gBAAA,EAC/BT,EAAA,SAAqBS,EAAA,KAAA,iBAAA,EACrBT,EAAA,WAAuBS,EAAA,KAAAT,EAAA,SAAA,EAEvBS,EAAA,KAAA,GAAA,CAAqB,EAAA,CAAAH,EAAAN,EAAA,KAAAA,EAAA,QAAAA,EAAA,SAAA,CAAA,EAIzBU,EAAAH,EAAA,QAAA,IAAAP,EAAA,MAAA,CAAAA,EAAA,KAAA,CAAA,EAOAK,EAAAM,GAAA,CACIX,EAAA,SAAAW,CAAA,CAAoB,EAcxBC,EAAAL,EAAAA,QAAA,IAEID,IAAA,SAA2B,CAAA,SAAA,QAC3BA,IAAA,QAA0B,CAAA,SAAA,QAC1BA,IAAA,SAA2B,CAAA,SAAA,QAC3BA,IAAA,QAA0B,CAAA,SAAA,QAC1BA,IAAA,SAA2B,CAAA,SAAA,QAC3B,CAAA,SAAA,QAAwB,CAAAA,CAAA,CAAA,EAI5B,OAAAO,EAAA,KACI,MAAC,CAAA,IAAAX,EAAS,UAAA,UAAAM,CAAA,GACyB,QAAAG,GAAAA,EAAA,gBAAA,EACY,MAAAD,EACnC,SAAA,CAGJV,EAAA,MAAAc,EAAA,IACIC,EAAC,CAAA,KAAA,SAAY,UAAA,oBACK,MAAAH,EACJ,SAAAZ,EAAA,IAAwB,CAAA,EAAKc,EAAA,IAAA,MAAA,CAAA,UAAA,gBAAA,SAAAd,EAAA,SAAA,EAIF,CAAA,CAAAA,EAAA,UAAAc,EAAA,IAIzCC,EAAC,CAAA,KAAA,SAAY,UAAA,sBACK,MAAAH,EACJ,UAAA,GACE,QAAAD,GAAAN,EAAAM,CAAA,EAC8B,SAAAX,EAAA,UACtC,CAAA,CAAW,CAAA,CAAA,CASvC,CAAA,EAEAF,EAAA,aAAA,CAAqB,KAAA,SACX,WAAA,QAEV,EAEAA,EAAA,YAAA"}