{"version":3,"file":"TIconButton-f9de2f2a.js","sources":["../../src/components/button/icon-button/TIconButton.tsx"],"sourcesContent":["import {CSSProperties, forwardRef, KeyboardEvent, MouseEvent, Ref, useCallback, useImperativeHandle, useMemo, useRef} from 'react';\nimport {TIconButtonProps, TIconButtonRef} from './TIconButton.interface';\nimport useRipple from '@/common/hook/UseRipple';\nimport TIcon from '../../icon/TIcon';\n\n\nconst TIconButton = forwardRef((props: TIconButtonProps, ref: Ref<TIconButtonRef>) => {\n\n    // region [Hooks]\n\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    const ripple = useRipple(rootRef);\n\n    useImperativeHandle(ref, () => ({\n        focus() { /**/ },\n        click() { /**/ },\n    }));\n\n    // endregion\n\n\n    // region [Styles]\n\n    const rootClass: string = useMemo(() => {\n        const clazz = [];\n\n        if (props.className) { clazz.push(props.className); }\n        if (props.primary) { clazz.push('t-icon-button--primary'); }\n        if (props.point) { clazz.push('t-icon-button--point'); }\n        if (props.disabled) { clazz.push('t-icon-button--disabled'); }\n        if (props.outlined) { clazz.push('t-icon-button--outlined'); }\n\n        return clazz.join(' ');\n    }, [props.className, props.primary, props.point, props.disabled, props.outlined]);\n\n    const rootStyle: CSSProperties = useMemo(() => {\n        let style: CSSProperties = {};\n\n        if (props.style) { style = {...style, ...props.style}; }\n\n        if (props.color && !props.disabled) {\n            style.color = props.color;\n            style.fill = props.color;\n            style.stroke = props.color;\n        }\n\n        return style;\n    }, [props.color, props.disabled, props.style]);\n\n    // endregion\n\n\n    // region [Events]\n\n    const onMouseDown = useCallback((event: MouseEvent): void => {\n        if (!props.disabled) {\n            ripple.register(event);\n        }\n    }, [props.disabled, ripple]);\n\n    const onMouseLeave = useCallback((): void => {\n        ripple.remove();\n    }, [ripple]);\n\n    const onKeyDown = useCallback((event: KeyboardEvent): void => {\n        if (event.key === 'Enter' || event.key === ' ') {\n            ripple.register(event);\n        }\n    }, [ripple]);\n\n    const onKeyUp = useCallback((event: KeyboardEvent): void => {\n        if (event.key === 'Enter' || event.key === ' ') {\n            ripple.remove();\n            if (props.onClick) {\n                props.onClick(event);\n            }\n        }\n    }, [props, ripple]);\n\n    const onClick = useCallback((event: MouseEvent): void => {\n        ripple.remove();\n        if (!props.disabled && props.onClick) {\n            props.onClick(event);\n        }\n    }, [props, ripple]);\n\n    // endregion\n\n    return (\n\n        <div ref={rootRef}\n             style={rootStyle}\n             className={`t-icon-button ${rootClass}`}\n             onMouseDown={onMouseDown}\n             onMouseLeave={onMouseLeave}\n             onKeyDown={onKeyDown}\n             onKeyUp={onKeyUp}\n             onClick={onClick}\n             tabIndex={props.disabled ? -1 : 0}\n             data-tooltip-id={props.tooltipId}\n             data-tooltip-content={props.tooltipContent}\n             data-tooltip-place={props.tooltipPlace}\n             data-tooltip-hidden={props.tooltipHidden}\n        >\n            <TIcon className={'t-icon-button__inner'}\n                   size={props.size}\n                   xsmall={props.xsmall}\n                   small={props.small}\n                   medium={props.medium}\n                   large={props.large}\n                   xlarge={props.xlarge}\n                   disabled={props.disabled}\n                   color={props.color}\n            >{props.children}</TIcon>\n        </div>\n    );\n});\n\nTIconButton.displayName = 'TIconButton';\n\nexport default TIconButton;\n"],"names":["TIconButton","forwardRef","props","ref","rootRef","useRef","ripple","useRipple","useImperativeHandle","rootClass","useMemo","clazz","rootStyle","style","onMouseDown","useCallback","event","onMouseLeave","onKeyDown","onKeyUp","onClick","jsx","TIcon"],"mappings":"0KAMA,MAAAA,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,CAII,MAAAC,EAAAC,SAAA,IAAA,EAEAC,EAAAC,EAAAH,CAAA,EAEAI,EAAA,oBAAAL,EAAA,KAAA,CAAgC,OAAA,CACpB,EAAO,OAAA,CACP,CAAO,EAAA,EAQnB,MAAAM,EAAAC,EAAAA,QAAA,IAAA,CACI,MAAAC,EAAA,CAAA,EAEA,OAAAT,EAAA,WAAuBS,EAAA,KAAAT,EAAA,SAAA,EACvBA,EAAA,SAAqBS,EAAA,KAAA,wBAAA,EACrBT,EAAA,OAAmBS,EAAA,KAAA,sBAAA,EACnBT,EAAA,UAAsBS,EAAA,KAAA,yBAAA,EACtBT,EAAA,UAAsBS,EAAA,KAAA,yBAAA,EAEtBA,EAAA,KAAA,GAAA,CAAqB,EAAA,CAAAT,EAAA,UAAAA,EAAA,QAAAA,EAAA,MAAAA,EAAA,SAAAA,EAAA,QAAA,CAAA,EAGzBU,EAAAF,EAAAA,QAAA,IAAA,CACI,IAAAG,EAAA,CAAA,EAEA,OAAAX,EAAA,QAAmBW,EAAA,CAAA,GAAAA,EAAA,GAAAX,EAAA,KAAA,GAEnBA,EAAA,OAAA,CAAAA,EAAA,WACIW,EAAA,MAAAX,EAAA,MACAW,EAAA,KAAAX,EAAA,MACAW,EAAA,OAAAX,EAAA,OAGJW,CAAO,EAAA,CAAAX,EAAA,MAAAA,EAAA,SAAAA,EAAA,KAAA,CAAA,EAQXY,EAAAC,cAAAC,GAAA,CACId,EAAA,UACII,EAAA,SAAAU,CAAA,CACJ,EAAA,CAAAd,EAAA,SAAAI,CAAA,CAAA,EAGJW,EAAAF,EAAAA,YAAA,IAAA,CACIT,EAAA,OAAA,CAAc,EAAA,CAAAA,CAAA,CAAA,EAGlBY,EAAAH,cAAAC,GAAA,EACIA,EAAA,MAAA,SAAAA,EAAA,MAAA,MACIV,EAAA,SAAAU,CAAA,CACJ,EAAA,CAAAV,CAAA,CAAA,EAGJa,EAAAJ,cAAAC,GAAA,EACIA,EAAA,MAAA,SAAAA,EAAA,MAAA,OACIV,EAAA,OAAA,EACAJ,EAAA,SACIA,EAAA,QAAAc,CAAA,EAER,EAAA,CAAAd,EAAAI,CAAA,CAAA,EAGJc,EAAAL,cAAAC,GAAA,CACIV,EAAA,OAAA,EACA,CAAAJ,EAAA,UAAAA,EAAA,SACIA,EAAA,QAAAc,CAAA,CACJ,EAAA,CAAAd,EAAAI,CAAA,CAAA,EAKJ,OAAAe,EAAA,IAEI,MAAC,CAAA,IAAAjB,EAAS,MAAAQ,EACE,UAAA,iBAAAH,CAAA,GAC8B,YAAAK,EACrC,aAAAG,EACA,UAAAC,EACA,QAAAC,EACA,QAAAC,EACA,SAAAlB,EAAA,SAAA,GAAA,EACgC,kBAAAA,EAAA,UACT,uBAAAA,EAAA,eACK,qBAAAA,EAAA,aACF,sBAAAA,EAAA,cACC,SAAAmB,EAAA,IAE5BC,EAAC,CAAA,UAAA,uBAAiB,KAAApB,EAAA,KACC,OAAAA,EAAA,OACE,MAAAA,EAAA,MACD,OAAAA,EAAA,OACC,MAAAA,EAAA,MACD,OAAAA,EAAA,OACC,SAAAA,EAAA,SACE,MAAAA,EAAA,MACH,SAAAA,EAAA,QACZ,CAAA,CAAS,CAAA,CAG7B,CAAA,EAEAF,EAAA,YAAA"}