{"version":3,"file":"TDropdown-0c00e00d.js","sources":["../../src/components/input/dropdown/TDropdown.tsx"],"sourcesContent":["import {\n    CSSProperties,\n    forwardRef,\n    KeyboardEvent,\n    ReactElement,\n    Ref,\n    useCallback,\n    useEffect,\n    useImperativeHandle,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport TIcon from '../../icon/TIcon';\nimport useValidator from '@/common/hook/UseValidator';\nimport {TDropdownItem, TDropdownProps, TDropdownRef} from './TDropdown.interface';\nimport useClickOutside from '@/common/hook/UseClickOutside';\nimport TCheckbox from '../checkbox/TCheckbox';\nimport TTextField from '../text-field/TTextField';\nimport THighlightText from '../../data-container/highlight-text/THighlightText';\nimport TChip from '../chip/TChip';\n\nconst TDropdown = forwardRef((props: TDropdownProps, ref: Ref<TDropdownRef>) => {\n\n    // region [Hooks]\n\n    const validator = useValidator(props.value, props.rules, props.successMessage);\n\n    const inputRef = useRef(null);\n    const rootRef = useRef(null);\n    const [filterText, setFilterText] = useState('');\n    const [isOpened, setIsOpened] = useState(false);\n    const [itemMap, setItemMap] = useState(new Map());\n\n\n    useImperativeHandle(ref, () => ({\n        focus() { inputRef?.current?.focus(); },\n        validate() { return validator.validate(); },\n    }));\n\n    // endregion\n\n\n    // region [Styles]\n\n    const getListItemContent = useCallback((item: TDropdownItem): string => {\n        if (!item) { return ''; }\n\n        return props.itemTemplate ? props.itemTemplate(item) : item[props.textKey];\n    }, [props]);\n\n\n    const getFilteredItem = useCallback((): TDropdownItem[] => {\n        if (!props.multiple && filterText === getListItemContent(itemMap.get(props.value))) {\n            return props.items;\n        }\n\n        return props.items.filter(\n            (item) => getListItemContent(item)\n                .toLowerCase()\n                .includes(filterText?.toLowerCase()),\n        );\n    }, [filterText, getListItemContent, itemMap, props.items, props.multiple, props.value]);\n\n\n    const rootClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (isOpened) clazz.push('t-dropdown--open');\n        if (props.disabled) clazz.push('t-dropdown--disabled');\n        if (!validator.result) clazz.push('t-dropdown--failure');\n        if (validator.result && validator.message) clazz.push('t-dropdown--success');\n\n        clazz.push(`t-dropdown--${props.type}`);\n\n        return clazz.join(' ');\n    }, [isOpened, props.disabled, props.type, validator.message, validator.result]);\n\n    const selectedClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.value?.length === 0) clazz.push('t-dropdown__control__selected--empty');\n\n        return clazz.join(' ');\n    }, [props.value?.length]);\n\n    const itemsClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (isOpened) clazz.push('t-dropdown__items--open');\n        if (props.noDetail) clazz.push('t-dropdown__items--no-detail');\n        if (getFilteredItem().length === 0) clazz.push('t-dropdown__items--empty');\n\n        return clazz.join(' ');\n    }, [getFilteredItem, isOpened, props.noDetail]);\n\n    const itemClass = useCallback((item: TDropdownItem): string => {\n        const clazz: string[] = [];\n\n        if (typeof props.value === 'object' && props.value.includes(item[props.valueKey])) {\n            clazz.push('t-dropdown__items__item--selected');\n        } else if (typeof props.value === 'string' && props.value === item[props.valueKey]) {\n            clazz.push('t-dropdown__items__item--selected');\n        }\n\n        return clazz.join(' ');\n    }, [props.value, props.valueKey]);\n\n    const rootStyle = useMemo((): CSSProperties => {\n        let style: CSSProperties = {};\n\n        if (props.style) style = {...props.style};\n        if (props.width) style = {...style, width: props.width};\n\n        return style;\n    }, [props.style, props.width]);\n\n    // endregion\n\n\n    // region [Events]\n\n    const onClickControl = (): void => {\n        toggleIsOpened();\n        focusToInput();\n    };\n\n    const onClickItem = (itemValue: string): void => {\n        modifyValue(itemValue);\n        focusToInput();\n        if (!props.multiple) { close(); }\n    };\n\n    const onFocus = (): void => {\n        validator.clearValidation();\n    };\n\n    const onblur = (): void => {\n        if (!isOpened && !props.lazy) {\n            validator.validate();\n            resetFilterText();\n        }\n    };\n\n    const onChangeFilterText = (value: string): void => {\n        setFilterText(value);\n\n        if (value.length > 0) {\n            toggleIsOpened(true);\n        } else {\n            toggleIsOpened(false);\n        }\n    };\n\n    const onKeyDownFilterText = (event: KeyboardEvent<HTMLInputElement>): void => {\n        if (event.key === 'Escape') { close(); }\n        if (event.key === 'Enter') { open(); }\n    };\n\n    const onKeyDownItem = (event: KeyboardEvent<HTMLDivElement>, itemValue: string): void => {\n        if (event.key === 'Escape') { close(); }\n        if (event.key === 'Enter') {\n            modifyValue(itemValue);\n            if (!props.multiple) {\n                focusToInput();\n                close();\n            }\n        }\n    };\n\n    const onClearFilterText = (): void => {\n        if (!props.multiple) {\n            props.onChange('');\n        }\n    };\n\n    // endregion\n\n\n    // region [ETC]\n\n    const focusToInput = () => {\n        inputRef.current.focus();\n    };\n\n    const resetFilterText = () => {\n        if (!props.multiple) {\n            setFilterText(getListItemContent(itemMap.get(props.value)));\n        }\n    };\n\n    const modifyValue = (newItem: any): void => {\n\n        if (props.multiple) {\n            if (props.value.includes(newItem)) {\n                props.onChange((props.value as string[]).filter((v) => v !== newItem));\n            } else {\n                props.onChange([...props.value, newItem]);\n            }\n        } else {\n            props.onChange(newItem);\n        }\n    };\n\n    const registerItemMap = () => {\n        const map = new Map();\n        props.items.forEach((item) => {\n            map.set(item[props.valueKey], item);\n        });\n        setItemMap(map);\n    };\n\n\n    const close = (): void => {\n        setIsOpened(false);\n    };\n\n    const open = (): void => {\n        setIsOpened(true);\n        validator.clearValidation();\n    };\n\n    const toggleIsOpened = (value?: boolean): void => {\n        if (value === true) {\n            open();\n        } else if (value === false) {\n            close();\n        } else if (isOpened) {\n            close();\n        } else {\n            open();\n        }\n    };\n\n    // endregion\n\n\n    // region [Templates]\n\n    const filterTextPlaceholder = useMemo((): string => {\n\n        if (props.value?.length === 0) { return props.placeholder; }\n        return null;\n    }, [props.value, props.placeholder]);\n\n    const getSelectedItemTemplate = (): ReactElement => {\n\n        if (props.multiple) {\n            if (props.chip) {\n                return (<>{\n                    (props.value as string[]).map((value) => (\n                        <TChip key={value}\n                               small\n                               onRemove={props.disabled ? null : () => onClickItem(value)}\n                        >{getListItemContent(itemMap.get(value))}</TChip>\n                    ))\n                }</>);\n            }\n\n            return (<>{\n                (props.value as string[])\n                    .map((value) => (getListItemContent(itemMap.get(value))))\n                    .join(', ')\n\n            }</>);\n\n        }\n\n        return (<></>);\n    };\n\n    const getListItemTemplate = (item: TDropdownItem): ReactElement => (\n        <THighlightText keyword={filterText}>\n            {getListItemContent(item)}\n        </THighlightText>\n    );\n\n    // endregion\n\n\n    // region [Hooks - Lifecycle]\n\n    useClickOutside(rootRef, close);\n\n    useEffect(registerItemMap, [props.items, props.valueKey]);\n    useEffect(resetFilterText, [getListItemContent, itemMap, props.multiple, props.value]);\n\n    // endregion\n\n    return (\n        <div ref={rootRef}\n             className={`t-dropdown ${rootClass}`}\n             style={rootStyle}\n             onFocus={onFocus}\n             onBlur={onblur}>\n\n            {/* Control */}\n            <div className={'t-dropdown__control'} onClick={onClickControl}>\n\n                {/* Control - Selected Items for multiple */}\n                {\n                    <div className={`t-dropdown__control__selected ${selectedClass}`}>\n                        {getSelectedItemTemplate()}\n\n                        {/* Control - Filter Text */}\n                        <TTextField ref={inputRef}\n                                    className={'t-dropdown__control__filter-text'}\n                                    value={filterText}\n                                    clearable\n                                    placeholder={filterTextPlaceholder}\n                                    disabled={props.disabled}\n                                    noTrim\n                                    onChange={onChangeFilterText}\n                                    onKeyDown={onKeyDownFilterText}\n                                    onClear={onClearFilterText}\n                        />\n                    </div>\n                }\n\n\n                {/* Control - Opener */}\n                <TIcon className={`t-dropdown__control__opener ${isOpened ? 't-dropdown__control__opener--open' : ''}`}\n                       small\n                       clickable\n                       color={props.disabled ? '#CCCCCC' : '#000000'}>keyboard_arrow_down</TIcon>\n            </div>\n\n            {/* Floating */}\n            <div className={`t-dropdown__items ${itemsClass}`}>\n                {\n                    isOpened && getFilteredItem()\n                        .map((item) => (\n                            <div key={item[props.valueKey]}\n                                 className={`t-dropdown__items__item ${itemClass(item)}`}\n                                 tabIndex={props.multiple ? -1 : 0}\n                                 onClickCapture={() => onClickItem(item[props.valueKey])}\n                                 onKeyDown={(event: KeyboardEvent<HTMLDivElement>) => onKeyDownItem(event, item[props.valueKey])}>\n                                {\n                                    props.multiple\n                                    && <TCheckbox className={'t-dropdown__items__item__checkbox'}\n                                                  checked={(props.value as string[]).includes(item[props.valueKey])}\n                                    />\n                                }\n                                {getListItemTemplate(item)}\n                            </div>\n                        ))\n                }\n            </div>\n\n            {/* Details */}\n            {\n                !props.noDetail && (\n                    <div className={'t-dropdown__details'}>\n                        <div className={'t-dropdown__details__message'}>\n                            {validator.message && `${validator.message}`}\n                        </div>\n                    </div>\n                )\n            }\n\n        </div>\n    );\n});\n\nTDropdown.defaultProps = {\n    type: 'outline',\n    valueKey: 'value',\n    textKey: 'text',\n    placeholder: '선택',\n    chip: true,\n    lazy: true,\n};\n\nTDropdown.displayName = 'TDropdown';\n\n\nexport default TDropdown;\n"],"names":["TDropdown","forwardRef","props","ref","validator","useValidator","inputRef","useRef","rootRef","filterText","setFilterText","useState","isOpened","setIsOpened","itemMap","setItemMap","useImperativeHandle","_a","getListItemContent","useCallback","item","getFilteredItem","rootClass","useMemo","clazz","selectedClass","itemsClass","itemClass","rootStyle","style","onClickControl","toggleIsOpened","focusToInput","onClickItem","itemValue","modifyValue","close","onFocus","onblur","resetFilterText","onChangeFilterText","value","onKeyDownFilterText","event","open","onKeyDownItem","onClearFilterText","newItem","v","registerItemMap","map","filterTextPlaceholder","getSelectedItemTemplate","jsx","Fragment","TChip","getListItemTemplate","THighlightText","useClickOutside","useEffect","jsxs","TTextField","TIcon","TCheckbox"],"mappings":"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"}