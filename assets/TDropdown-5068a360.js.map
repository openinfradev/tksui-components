{"version":3,"file":"TDropdown-5068a360.js","sources":["../../src/components/input/dropdown/TDropdown.tsx"],"sourcesContent":["import {\n    CSSProperties,\n    forwardRef,\n    KeyboardEvent,\n    Ref,\n    useCallback,\n    useEffect,\n    useImperativeHandle,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport TIcon from '../../icon/TIcon';\nimport useValidator from '@/common/hook/UseValidator';\nimport {TDropdownItem, TDropdownProps, TDropdownRef} from './TDropdown.interface';\nimport useClickOutside from '@/common/hook/UseClickOutside';\nimport TCheckbox from '../checkbox/TCheckbox';\nimport TTextField from '../text-field/TTextField';\nimport THighlightText from '../../data-container/highlight-text/THighlightText';\nimport TChip from '../chip/TChip';\n\nconst TDropdown = forwardRef((props: TDropdownProps, ref: Ref<TDropdownRef>) => {\n\n    // region [Hooks]\n\n    const validator = useValidator(props.value, props.rules, props.successMessage);\n\n    const inputRef = useRef(null);\n    const controlRef = useRef<HTMLDivElement>(null);\n    const rootRef = useRef(null);\n    const [filterText, setFilterText] = useState('');\n    const [isOpened, setIsOpened] = useState(false);\n    const [itemMap, setItemMap] = useState(new Map());\n\n\n    useImperativeHandle(ref, () => ({\n        focus() {\n            controlRef?.current?.focus();\n        },\n        validate() {\n            return validator.validate();\n        },\n    }));\n\n    // endregion\n\n    // region [Privates]\n\n    const focusToControl = useCallback(() => {\n        controlRef.current.focus();\n    }, []);\n\n    const modifyValue = useCallback((newItem: any): void => {\n\n        props.onChange(newItem);\n\n        if (props.multiple) {\n            if (props.value.includes(newItem)) {\n                props.onChange((props.value as string[]).filter((v) => v !== newItem));\n            } else {\n                props.onChange([...props.value, newItem]);\n            }\n        } else {\n            props.onChange(newItem);\n        }\n    }, [props]);\n\n    const initItemMap = useCallback(() => {\n        const map = new Map();\n        props.items.forEach((item) => {\n            map.set(item[props.valueKey], item);\n        });\n        setItemMap(map);\n    }, [props.items, props.valueKey]);\n\n    const close = useCallback((setFocus: boolean): void => {\n        setIsOpened(false);\n        setFilterText('');\n        if (setFocus) {\n            focusToControl();\n        }\n    }, [focusToControl]);\n\n    const open = useCallback((): void => {\n        setIsOpened(true);\n        validator.clearValidation();\n    }, [validator]);\n\n    const toggleIsOpened = useCallback((): void => {\n        if (isOpened) {\n            close(true);\n        } else {\n            open();\n        }\n    }, [close, isOpened, open]);\n\n    // endregion\n\n\n    // region [Styles]\n\n    const getItemTemplate = useCallback((item: TDropdownItem): string => {\n        if (!item) {\n            return '';\n        }\n\n        return props.itemTemplate ? props.itemTemplate(item) : item[props.textKey];\n    }, [props]);\n\n\n    const getFilteredItems = useCallback((): TDropdownItem[] => {\n        if (!props.multiple && filterText === getItemTemplate(itemMap.get(props.value))) {\n            return props.items;\n        }\n\n        return props.items.filter(\n            (item) => getItemTemplate(item)\n                .toLowerCase()\n                .includes(filterText?.toLowerCase()),\n        );\n    }, [filterText, getItemTemplate, itemMap, props.items, props.multiple, props.value]);\n\n    const rootClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.className) { clazz.push(props.className); }\n        if (isOpened) { clazz.push('t-dropdown--open'); }\n        if (props.disabled) { clazz.push('t-dropdown--disabled'); }\n        if (!validator.result) { clazz.push('t-dropdown--failure'); }\n        if (validator.result && validator.message) { clazz.push('t-dropdown--success'); }\n\n        clazz.push(`t-dropdown--${props.type}`);\n\n        return clazz.join(' ');\n    }, [isOpened, props.className, props.disabled, props.type, validator.message, validator.result]);\n\n    const selectedClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.value?.length === 0) clazz.push('t-dropdown__control__selected--empty');\n\n        return clazz.join(' ');\n    }, [props.value?.length]);\n\n    const itemsClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (isOpened) clazz.push('t-dropdown__items--open');\n        if (props.noDetail) clazz.push('t-dropdown__items--no-detail');\n        if (getFilteredItems().length === 0) clazz.push('t-dropdown__items--empty');\n\n        return clazz.join(' ');\n    }, [getFilteredItems, isOpened, props.noDetail]);\n\n    const itemClass = useCallback((item: TDropdownItem): string => {\n        const clazz: string[] = [];\n\n        if (typeof props.value === 'object' && props.value.includes(item[props.valueKey])) {\n            clazz.push('t-dropdown__items__item--selected');\n        } else if (typeof props.value === 'string' && props.value === item[props.valueKey]) {\n            clazz.push('t-dropdown__items__item--selected');\n        }\n\n        return clazz.join(' ');\n    }, [props.value, props.valueKey]);\n\n    const rootStyle = useMemo((): CSSProperties => {\n        let style: CSSProperties = {};\n\n        if (props.style) style = {...props.style};\n        if (props.width) style = {...style, width: props.width};\n\n        return style;\n    }, [props.style, props.width]);\n\n    // endregion\n\n\n    // region [Events]\n\n    const onClickControl = useCallback((): void => {\n        toggleIsOpened();\n        focusToControl();\n    }, [focusToControl, toggleIsOpened]);\n\n    const onClickItem = useCallback((itemValue: string): void => {\n        modifyValue(itemValue);\n        if (!props.multiple) {\n            close(true);\n        }\n    }, [close, modifyValue, props.multiple]);\n\n    const onblur = useCallback((): void => {\n        if (!isOpened && !props.lazy) {\n            validator.validate();\n        }\n    }, [isOpened, props.lazy, validator]);\n\n    const onChangeFilterText = useCallback((value: string): void => {\n        setFilterText(value);\n    }, []);\n\n    const onKeyDownFilterText = useCallback((event: KeyboardEvent<HTMLInputElement>): void => {\n        if (event.key === 'Escape') {\n            close(true);\n        }\n    }, [close]);\n\n    const onKeyDownControl = useCallback((event: KeyboardEvent<HTMLInputElement>): void => {\n        if (event.key === 'Escape') {\n            close(true);\n        }\n        if (event.key === 'Enter' || event.key === ' ') {\n            toggleIsOpened();\n        }\n    }, [close, toggleIsOpened]);\n\n    const onKeyDownItem = useCallback((event: KeyboardEvent<HTMLDivElement>, itemValue: string): void => {\n        if (event.key === 'Escape') {\n            close(true);\n        }\n        if (event.key === 'Enter') {\n            modifyValue(itemValue);\n            if (!props.multiple) {\n                focusToControl();\n                close(true);\n            }\n        }\n    }, [close, focusToControl, modifyValue, props.multiple]);\n\n    const onClearFilterText = useCallback((): void => {\n        if (!props.multiple) {\n            props.onChange('');\n        }\n    }, [props]);\n\n    // endregion\n\n\n    // region [Templates]\n\n\n    const placeholder = useMemo((): string => {\n\n        if (props.value?.length === 0) {\n            return props.placeholder;\n        }\n        return null;\n    }, [props.value, props.placeholder]);\n\n    // endregion\n\n\n    // region [Hooks - Lifecycle]\n\n    useClickOutside(rootRef, () => close(false));\n\n    useEffect(() => {\n        initItemMap();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.items, props.valueKey]);\n\n    // endregion\n\n    return (\n        <div ref={rootRef}\n             className={`t-dropdown ${rootClass}`}\n             style={rootStyle}\n             onBlur={onblur}\n             id={props.id}\n             data-testid={'dropdown-root'}>\n\n            {/* Control */}\n            <div className={'t-dropdown__control'}\n                 tabIndex={props.disabled ? -1 : 0}\n                 onKeyDown={onKeyDownControl}\n                 ref={controlRef}\n                 onClick={onClickControl}>\n\n                {/* Control - Selected Items */}\n                <div className={`t-dropdown__control__selected ${selectedClass}`}>\n\n                    {/* Placeholder */}\n                    {placeholder}\n\n                    {/* Multiple Chip */}\n                    {\n                        props.multiple && props.chip && (\n                            props.value as string[]).map((value) => (\n                            <TChip key={value} small onRemove={props.disabled ? null : () => onClickItem(value)}>\n                                {getItemTemplate(itemMap.get(value))}\n                            </TChip>\n                        ))\n                    }\n\n                    {/* Multiple Text */}\n                    {\n                        props.multiple && !props.chip && (\n                            (props.value as string[])\n                                .map((value) => (getItemTemplate(itemMap.get(value))))\n                                .join(', ')\n                        )\n                    }\n\n                    {/* Single Text */}\n                    {\n                        !props.multiple && (\n                            getItemTemplate(itemMap.get(props.value))\n                        )\n                    }\n                </div>\n\n                {/* Control - Opener */}\n                <TIcon className={`t-dropdown__control__opener ${isOpened ? 't-dropdown__control__opener--open' : ''}`}\n                       small\n                       clickable\n                       color={props.disabled ? '#CCCCCC' : '#000000'}>keyboard_arrow_down</TIcon>\n            </div>\n\n            {/* Floating */}\n            <div className={`t-dropdown__items ${itemsClass}`}>\n                {/* Control - Filter Text */}\n                <TTextField ref={inputRef}\n                            className={'t-dropdown__items__filter-text'}\n                            value={filterText}\n                            placeholder={props.filterPlaceholder}\n                            disabled={props.disabled}\n                            noTrim\n                            searchable\n                            onChange={onChangeFilterText}\n                            onClear={onClearFilterText}\n                            onKeyDown={onKeyDownFilterText}\n                />\n                <div className={'t-dropdown__items__wrapper'}>\n                    {\n\n                        isOpened && getFilteredItems()\n                            .map((item) => (\n                                <div key={item[props.valueKey]}\n                                     className={`t-dropdown__items__item ${itemClass(item)}`}\n                                     tabIndex={props.multiple ? -1 : 0}\n                                     onClickCapture={() => onClickItem(item[props.valueKey])}\n                                     onKeyDown={(event: KeyboardEvent<HTMLDivElement>) => onKeyDownItem(event, item[props.valueKey])}>\n                                    {\n                                        props.multiple\n                                        && <TCheckbox className={'t-dropdown__items__item__checkbox'}\n                                                      checked={(props.value as string[]).includes(item[props.valueKey])}\n                                        />\n                                    }\n                                    <THighlightText keyword={filterText}>\n                                        {getItemTemplate(item)}\n                                    </THighlightText>\n                                </div>\n                            ))\n                    }\n                    {\n                        (isOpened && getFilteredItems().length === 0) && (\n                            <div className={'t-dropdown__items__item'}>\n                                검색 결과가 없습니다.\n                            </div>\n                        )\n                    }\n                </div>\n            </div>\n\n            {/* Details */}\n            {\n                !props.noDetail && (\n                    <div className={'t-dropdown__details'}>\n                        <div className={'t-dropdown__details__message'}>\n                            {validator.message && `${validator.message}`}\n                        </div>\n                    </div>\n                )\n            }\n\n        </div>\n    );\n});\n\nTDropdown.defaultProps = {\n    type: 'outline',\n    valueKey: 'value',\n    textKey: 'text',\n    placeholder: '목록에서 선택해 주세요',\n    filterPlaceholder: '검색어를 입력해 주세요',\n    chip: true,\n    lazy: true,\n};\n\nTDropdown.displayName = 'TDropdown';\n\n\nexport default TDropdown;\n"],"names":["TDropdown","forwardRef","props","ref","validator","useValidator","inputRef","useRef","controlRef","rootRef","filterText","setFilterText","useState","isOpened","setIsOpened","itemMap","setItemMap","useImperativeHandle","_a","focusToControl","useCallback","modifyValue","newItem","v","initItemMap","map","item","close","setFocus","open","toggleIsOpened","getItemTemplate","getFilteredItems","rootClass","useMemo","clazz","selectedClass","itemsClass","itemClass","rootStyle","style","onClickControl","onClickItem","itemValue","onblur","onChangeFilterText","value","onKeyDownFilterText","event","onKeyDownControl","onKeyDownItem","onClearFilterText","placeholder","useClickOutside","useEffect","jsxs","jsx","TChip","TIcon","TTextField","TCheckbox","THighlightText"],"mappings":"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"}