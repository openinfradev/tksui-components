{"version":3,"file":"TTextField-7c9fada5.js","sources":["../../node_modules/lodash/uniqueId.js","../../src/components/input/text-field/TTextField.tsx"],"sourcesContent":["var toString = require('./toString');\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nmodule.exports = uniqueId;\n","import {\n    CSSProperties,\n    forwardRef,\n    KeyboardEvent,\n    MouseEvent,\n    Ref,\n    useCallback,\n    useImperativeHandle,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport uniqueId from 'lodash/uniqueId';\nimport TIcon from '../../icon/TIcon';\nimport {TTextFieldProps, TTextFieldRef} from './TTextField.interface';\nimport useValidator from '@/common/hook/UseValidator';\n\nconst TTextField = forwardRef((props: TTextFieldProps, ref: Ref<TTextFieldRef>) => {\n\n\n    // region [Hooks]\n\n    const [isPasswordVisible, setIsPasswordVisible] = useState<boolean>(false);\n    const [hasFocus, setHasFocus] = useState<boolean>(false);\n    const validator = useValidator(props.noTrim ? props.value : props.value.trim(), props.rules, props.successMessage);\n    const inputRef = useRef<HTMLInputElement>(null);\n    const inputUuid = uniqueId();\n\n    useImperativeHandle(ref, () => ({\n        focus() {\n            inputRef?.current?.focus();\n        },\n        blur() {\n            inputRef?.current?.blur();\n        },\n        validate() {\n            return validator.validate();\n        },\n        manualValidate(result: boolean, message?: string) {\n            validator.manualValidate(result, message);\n        },\n        clearValidation() {\n            validator.clearValidation();\n        },\n        getValidateResult(): boolean {\n            return validator.result;\n        },\n        getValidateMessage(): string {\n            return validator.message;\n        },\n    }));\n\n    // endregion\n\n\n    // region [Events]\n\n    const onChange = useCallback((event): void => {\n\n        const newLength = props.noTrim ? event.target.value.length : event.target.value.trim().length;\n\n        if (props.counter) {\n            if (newLength > props.counter) {\n                props.onChange(event.target.value.substring(0, props.counter));\n                return;\n            }\n        }\n        props.onChange(event.target.value);\n    }, [props]);\n    const onFocus = useCallback((): void => {\n        validator.clearValidation();\n        setHasFocus(true);\n    }, [validator]);\n\n    const onBlur = useCallback((): void => {\n        if (!props.noTrim && props.value !== props.value.trim()) {\n            props.onChange(props.value.trim());\n        }\n        if (!props.lazy) {\n            validator.validate();\n        }\n        setHasFocus(false);\n        if (props.onBlur) {\n            props.onBlur();\n        }\n\n    }, [props, validator]);\n\n    const onKeyDown = useCallback((event: KeyboardEvent<HTMLInputElement>): void => {\n        if (event.key === 'Enter' && props.onKeyDownEnter) {\n            props.onKeyDownEnter(event);\n        }\n\n        if (props.onKeyDown) {\n            props.onKeyDown(event);\n        }\n    }, [props]);\n\n    const onClickClear = useCallback((event: MouseEvent): void => {\n        event.stopPropagation();\n        if (props.onChange) { props.onChange(''); }\n        if (props.onClear) { props.onClear(); }\n    }, [props]);\n\n    // endregion\n\n\n    // region [Privates]\n\n    const togglePasswordVisibility = useCallback((): void => {\n        setIsPasswordVisible(!isPasswordVisible);\n    }, [isPasswordVisible]);\n\n    const inputType = useMemo((): string => {\n\n        if (props.password && !isPasswordVisible) return 'password';\n        return 'text';\n    }, [props.password, isPasswordVisible]);\n\n    const counterLength = useMemo((): number => {\n\n        if (props.noTrim) {\n            return props.value?.length;\n        }\n        return props.value?.trim().length;\n    }, [props.noTrim, props.value]);\n\n\n    // endregion\n\n\n    // region [Templates]\n\n    const rootClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.className) { clazz.push(props.className); }\n\n        if (props.disabled) { clazz.push('t-text-field--disabled'); }\n        if (!validator.result) { clazz.push('t-text-field--failure'); }\n        if (validator.result && validator.message) { clazz.push('t-text-field--success'); }\n        if (hasFocus) { clazz.push('t-text-field--focused'); }\n\n        clazz.push(`t-text-field--${props.type}`);\n\n        return clazz.join(' ');\n    }, [props.className, props.disabled, props.type, validator.result, validator.message, hasFocus]);\n\n    const inputClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.disabled) clazz.push('t-text-field__container__input--disabled');\n\n        return clazz.join(' ');\n    }, [props.disabled]);\n\n    const labelClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.required) { clazz.push('t-text-field__label--required'); }\n\n        return clazz.join(' ');\n    }, [props.required]);\n\n    const rootStyle = useMemo((): CSSProperties => {\n        let style: CSSProperties = {};\n\n        if (props.style) style = {...props.style};\n        if (props.width) style = {...style, width: props.width};\n\n        return style;\n    }, [props.style, props.width]);\n\n\n    // endregion\n\n    return (\n        <div className={`t-text-field ${rootClass}`} style={rootStyle} id={props.id} data-testid={'text-field-root'}>\n            {\n                props.label && (\n                    <label className={`t-text-field__label ${labelClass}`} htmlFor={inputUuid}>\n                        {props.label}\n                    </label>\n                )\n            }\n            <div className={'t-text-field__container'}>\n                <input id={inputUuid}\n                       ref={inputRef}\n                       type={inputType}\n                       tabIndex={props.disabled ? -1 : 0}\n                       className={`t-text-field__container__input ${inputClass}`}\n                       disabled={props.disabled}\n\n                       placeholder={!props.disabled ? props.placeholder : ''}\n                       value={props.value}\n                       onChange={onChange}\n                       onKeyDown={onKeyDown}\n                       onFocus={onFocus}\n                       onBlur={onBlur}\n                       autoComplete={props.autoComplete}\n                       data-testid={'text-field-input'}\n                />\n                {\n                    props.clearable && props.value && props.value.length > 0 && !props.disabled && (\n                        <TIcon small\n                               className={'t-text-field__container__action-icon'}\n                               clickable\n                               onClick={onClickClear}>\n                            clear\n                        </TIcon>\n                    )\n                }\n                {\n                    props.searchable && !props.disabled && (\n                        <TIcon small\n                               className={'t-text-field__container__action-icon'}\n                               clickable\n                               onClick={props.onClickSearch}>\n                            search\n                        </TIcon>\n                    )\n                }\n                {\n                    props.password && !props.disabled && (\n                        <TIcon small\n                               className={'t-text-field__container__action-icon'}\n                               clickable\n                               onClick={togglePasswordVisibility}>\n                            {isPasswordVisible ? 'visibility_off' : 'visibility'}\n                        </TIcon>\n                    )\n                }\n            </div>\n\n            <div className={'t-text-field__details'}>\n                <div className={'t-text-field__details__message'}>\n                    {\n                        validator.message\n                        && `${validator.message}`\n                    }\n                </div>\n                <div className={'t-text-field__details__counter'} data-testid={'text-field-counter'}>\n                    {\n                        props.counter && !props.disabled\n                        && `${counterLength} / ${props.counter}`\n                    }\n                </div>\n            </div>\n\n        </div>\n    );\n});\n\nTTextField.defaultProps = {\n    type: 'outline',\n    lazy: true,\n};\n\nTTextField.displayName = 'TTextField';\n\n\nexport default TTextField;\n"],"names":["toString","require$$0","idCounter","uniqueId","prefix","id","uniqueId_1","TTextField","forwardRef","props","ref","isPasswordVisible","setIsPasswordVisible","useState","hasFocus","setHasFocus","validator","useValidator","inputRef","useRef","inputUuid","useImperativeHandle","_a","result","message","onChange","useCallback","event","newLength","onFocus","onBlur","onKeyDown","onClickClear","togglePasswordVisibility","inputType","useMemo","counterLength","_b","rootClass","clazz","inputClass","labelClass","rootStyle","style","jsxs","jsx","TIcon"],"mappings":"2QAAA,IAAIA,EAAWC,EAGXC,EAAY,EAmBhB,SAASC,EAASC,EAAQ,CACxB,IAAIC,EAAK,EAAEH,EACX,OAAOF,EAASI,CAAM,EAAIC,CAC5B,CAEA,IAAAC,EAAiBH,eCVjBI,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,CAKI,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EACAG,EAAAC,EAAAR,EAAA,OAAAA,EAAA,MAAAA,EAAA,MAAA,KAAA,EAAAA,EAAA,MAAAA,EAAA,cAAA,EACAS,EAAAC,SAAA,IAAA,EACAC,EAAAjB,IAEAkB,EAAA,oBAAAX,EAAA,KAAA,CAAgC,OAAA,QAExBY,EAAAJ,GAAA,YAAAA,EAAA,UAAA,MAAAI,EAAA,OAAyB,EAC7B,MAAA,QAEIA,EAAAJ,GAAA,YAAAA,EAAA,UAAA,MAAAI,EAAA,MAAwB,EAC5B,UAAA,CAEI,OAAAN,EAAA,UAA0B,EAC9B,eAAAO,EAAAC,EAAA,CAEIR,EAAA,eAAAO,EAAAC,CAAA,CAAwC,EAC5C,iBAAA,CAEIR,EAAA,gBAAA,CAA0B,EAC9B,mBAAA,CAEI,OAAAA,EAAA,MAAiB,EACrB,oBAAA,CAEI,OAAAA,EAAA,OAAiB,CACrB,EAAA,EAQJ,MAAAS,EAAAC,cAAAC,GAAA,CAEI,MAAAC,EAAAnB,EAAA,OAAAkB,EAAA,OAAA,MAAA,OAAAA,EAAA,OAAA,MAAA,KAAA,EAAA,OAEA,GAAAlB,EAAA,SACImB,EAAAnB,EAAA,QAAA,CACIA,EAAA,SAAAkB,EAAA,OAAA,MAAA,UAAA,EAAAlB,EAAA,OAAA,CAAA,EACA,MAAA,CAGRA,EAAA,SAAAkB,EAAA,OAAA,KAAA,CAAiC,EAAA,CAAAlB,CAAA,CAAA,EAErCoB,EAAAH,EAAAA,YAAA,IAAA,CACIV,EAAA,gBAAA,EACAD,EAAA,EAAA,CAAgB,EAAA,CAAAC,CAAA,CAAA,EAGpBc,EAAAJ,EAAAA,YAAA,IAAA,CACI,CAAAjB,EAAA,QAAAA,EAAA,QAAAA,EAAA,MAAA,QACIA,EAAA,SAAAA,EAAA,MAAA,KAAA,CAAA,EAEJA,EAAA,MACIO,EAAA,SAAA,EAEJD,EAAA,EAAA,EACAN,EAAA,QACIA,EAAA,OAAA,CACJ,EAAA,CAAAA,EAAAO,CAAA,CAAA,EAIJe,EAAAL,cAAAC,GAAA,CACIA,EAAA,MAAA,SAAAlB,EAAA,gBACIA,EAAA,eAAAkB,CAAA,EAGJlB,EAAA,WACIA,EAAA,UAAAkB,CAAA,CACJ,EAAA,CAAAlB,CAAA,CAAA,EAGJuB,EAAAN,cAAAC,GAAA,CACIA,EAAA,gBAAA,EACAlB,EAAA,UAAsBA,EAAA,SAAA,EAAA,EACtBA,EAAA,SAAqBA,EAAA,QAAA,CAAiB,EAAA,CAAAA,CAAA,CAAA,EAQ1CwB,EAAAP,EAAAA,YAAA,IAAA,CACId,EAAA,CAAAD,CAAA,CAAuC,EAAA,CAAAA,CAAA,CAAA,EAG3CuB,EAAAC,EAAAA,QAAA,IAEI1B,EAAA,UAAA,CAAAE,EAA0C,WAC1C,OAAO,CAAAF,EAAA,SAAAE,CAAA,CAAA,EAGXyB,EAAAD,EAAAA,QAAA,IAAA,SAEI,OAAA1B,EAAA,QACIa,EAAAb,EAAA,QAAA,YAAAa,EAAA,QAEJe,EAAA5B,EAAA,QAAA,YAAA4B,EAAA,OAAA,MAA2B,EAAA,CAAA5B,EAAA,OAAAA,EAAA,KAAA,CAAA,EAS/B6B,EAAAH,EAAAA,QAAA,IAAA,CACI,MAAAI,EAAA,CAAA,EAEA,OAAA9B,EAAA,WAAuB8B,EAAA,KAAA9B,EAAA,SAAA,EAEvBA,EAAA,UAAsB8B,EAAA,KAAA,wBAAA,EACtBvB,EAAA,QAAyBuB,EAAA,KAAA,uBAAA,EACzBvB,EAAA,QAAAA,EAAA,SAA6CuB,EAAA,KAAA,uBAAA,EAC7CzB,GAAgByB,EAAA,KAAA,uBAAA,EAEhBA,EAAA,KAAA,iBAAA9B,EAAA,IAAA,EAAA,EAEA8B,EAAA,KAAA,GAAA,CAAqB,EAAA,CAAA9B,EAAA,UAAAA,EAAA,SAAAA,EAAA,KAAAO,EAAA,OAAAA,EAAA,QAAAF,CAAA,CAAA,EAGzB0B,EAAAL,EAAAA,QAAA,IAAA,CACI,MAAAI,EAAA,CAAA,EAEA,OAAA9B,EAAA,UAAoB8B,EAAA,KAAA,0CAAA,EAEpBA,EAAA,KAAA,GAAA,CAAqB,EAAA,CAAA9B,EAAA,QAAA,CAAA,EAGzBgC,EAAAN,EAAAA,QAAA,IAAA,CACI,MAAAI,EAAA,CAAA,EAEA,OAAA9B,EAAA,UAAsB8B,EAAA,KAAA,+BAAA,EAEtBA,EAAA,KAAA,GAAA,CAAqB,EAAA,CAAA9B,EAAA,QAAA,CAAA,EAGzBiC,EAAAP,EAAAA,QAAA,IAAA,CACI,IAAAQ,EAAA,CAAA,EAEA,OAAAlC,EAAA,QAAiBkC,EAAA,CAAA,GAAAlC,EAAA,QACjBA,EAAA,QAAiBkC,EAAA,CAAA,GAAAA,EAAA,MAAAlC,EAAA,KAAA,GAEjBkC,CAAO,EAAA,CAAAlC,EAAA,MAAAA,EAAA,KAAA,CAAA,EAMX,OAAAmC,EAAAA,KAAA,MAAA,CAAA,UAAA,gBAAAN,CAAA,GAAA,MAAAI,EAAA,GAAAjC,EAAA,GAAA,cAAA,kBAAA,SAAA,CAGYA,EAAA,OAAAoC,EAAA,IAAA,QAAA,CAAA,UAAA,uBAAAJ,CAAA,GAAA,QAAArB,EAAA,SAAAX,EAAA,KAAA,CAAA,EAGImC,EAAAA,KAAA,MAAA,CAAA,UAAA,0BAAA,SAAA,CAIJC,EAAA,IAAA,QAAC,CAAA,GAAAzB,EAAU,IAAAF,EACC,KAAAgB,EACC,SAAAzB,EAAA,SAAA,GAAA,EAC0B,UAAA,kCAAA+B,CAAA,GACuB,SAAA/B,EAAA,SACvC,YAAAA,EAAA,SAAA,GAAAA,EAAA,YAEmC,MAAAA,EAAA,MACtC,SAAAgB,EACb,UAAAM,EACA,QAAAF,EACA,OAAAC,EACA,aAAArB,EAAA,aACoB,cAAA,kBACP,CAAA,EACpBA,EAAA,WAAAA,EAAA,OAAAA,EAAA,MAAA,OAAA,GAAA,CAAAA,EAAA,UAAAoC,EAAA,IAGQC,EAAC,CAAA,MAAA,GAAW,UAAA,uCACM,UAAA,GACF,QAAAd,EACA,SAAA,OAAc,CAAA,EAE9BvB,EAAA,YAAA,CAAAA,EAAA,UAAAoC,EAAA,IAKAC,EAAC,CAAA,MAAA,GAAW,UAAA,uCACM,UAAA,GACF,QAAArC,EAAA,cACM,SAAA,QAAe,CAAA,EAErCA,EAAA,UAAA,CAAAA,EAAA,UAAAoC,EAAA,IAKAC,EAAC,CAAA,MAAA,GAAW,UAAA,uCACM,UAAA,GACF,QAAAb,EACA,SAAAtB,EAAA,iBAAA,YAC4B,CAAA,CAC5C,EAAA,EAGZiC,EAAAA,KAAA,MAAA,CAAA,UAAA,wBAAA,SAAA,CAGIC,EAAAA,IAAA,MAAA,CAAA,UAAA,iCAAA,SAAA7B,EAAA,SAAA,GAAAA,EAAA,OAAA,EAAA,CAAA,EAKA6B,MAAA,MAAA,CAAA,UAAA,iCAAA,cAAA,qBAAA,SAAApC,EAAA,SAAA,CAAAA,EAAA,UAAA,GAAA2B,CAAA,MAAA3B,EAAA,OAAA,GAAA,CAMA,EAAA,CACJ,CAAA,CAAA,CAIZ,CAAA,EAEAF,EAAA,aAAA,CAA0B,KAAA,UAChB,KAAA,EAEV,EAEAA,EAAA,YAAA","x_google_ignoreList":[0]}