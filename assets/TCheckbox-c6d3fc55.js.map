{"version":3,"file":"TCheckbox-c6d3fc55.js","sources":["../../src/components/input/checkbox/TCheckbox.tsx"],"sourcesContent":["import {CSSProperties, forwardRef, KeyboardEvent, ReactElement, Ref, useEffect, useImperativeHandle, useRef, useState} from 'react';\nimport TIcon from '../../icon/TIcon';\nimport {TCheckboxProps, TCheckboxRef} from './TCheckbox.interface';\nimport useValidator from '@/common/hook/UseValidator';\n\n\nconst TCheckbox = forwardRef((props: TCheckboxProps, ref: Ref<TCheckboxRef>) => {\n\n    // region [Hooks]\n\n    const validator = useValidator(props.value, props.rules, props.successMessage);\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    useEffect(modifyStatus, [props.value, props.indeterminate, props.checked, props.positiveValue]);\n    const [status, setStatus] = useState('uncheck');\n\n    useImperativeHandle(ref, () => ({\n        focus() { rootRef?.current?.focus(); },\n        validate() { return validator.validate(); },\n    }));\n\n    // endregion\n\n\n    // region [Styles]\n\n    function getRootClass(): string {\n        const clazz: string[] = [];\n\n        if (props.className) clazz.push(props.className);\n        if (props.disabled) clazz.push('t-checkbox--disabled');\n        if (!validator.result) clazz.push('t-checkbox--failure');\n        if (validator.result && validator.message) clazz.push('t-checkbox--success');\n\n        return clazz.join(' ');\n    }\n\n    function getRootStyle(): CSSProperties {\n        let style: CSSProperties = {};\n\n        if (props.style) style = {...props.style};\n\n        return style;\n    }\n\n    // endregion\n\n\n    // region [Events]\n\n    function onClickCheckbox(): void {\n        emitChange();\n    }\n\n    function onBlur(): void {\n        if (!props.lazy) {\n            validator.validate();\n        }\n    }\n\n    function onKeyDown(event: KeyboardEvent): void {\n        if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            emitChange();\n        }\n    }\n\n    // endregion\n\n\n    // region [ETC]\n\n    function emitChange(): void {\n        if (typeof props.onChange !== 'function') {\n            return;\n        }\n\n        if (status === 'check') {\n            props.onChange(props.negativeValue, props.positiveValue);\n        } else {\n            props.onChange(props.positiveValue);\n        }\n\n    }\n\n    function modifyStatus(): void {\n        if (props.checked === true) {\n            setStatus('check');\n        } else if (props.checked === false) {\n            setStatus('uncheck');\n        } else if (props.indeterminate) {\n            setStatus('indeterminate');\n        } else if (props.value === props.positiveValue) {\n            setStatus('check');\n        } else {\n            setStatus('uncheck');\n        }\n    }\n\n    // endregion\n\n\n    // region [Templates]\n\n    function iconTemplate(): ReactElement {\n\n        let iconType: string;\n        if (status === 'indeterminate') {\n            iconType = 't_check_intermediate';\n        } else if (status === 'check') {\n            iconType = 't_check_on';\n        } else if (status === 'uncheck' && props.disabled) {\n            iconType = 't_check_disabled_off';\n        } else if (status === 'uncheck' && !props.disabled) {\n            iconType = 't_check_off';\n        } else {\n            throw Error('Invalid status');\n        }\n\n        return (\n            <TIcon small type={'filled'} className={`t-checkbox__icon t-checkbox__icon--${status}`}>{iconType}</TIcon>\n        );\n    }\n\n    return (\n        <div ref={rootRef}\n             className={`t-checkbox ${getRootClass()}`}\n             style={getRootStyle()}>\n\n            {/* Main */}\n            <div className={'t-checkbox__container'}\n                 tabIndex={props.disabled ? -1 : 0}\n                 onFocus={validator.clearValidation}\n                 onBlur={onBlur}\n                 onKeyDown={onKeyDown}\n                 onClick={onClickCheckbox}>\n                {iconTemplate()}\n                <span className={'t-checkbox__label'}>{props.children}</span>\n            </div>\n\n            {/* Validation message, rule 이 설정된 경우에만 그려지게 합니다 */}\n            {\n                props.rules\n                && <div className={'t-checkbox__message'}>\n                    {validator.message}\n                </div>\n            }\n        </div>\n    );\n\n    // endregion\n\n\n});\n\nTCheckbox.defaultProps = {\n    positiveValue: true,\n    negativeValue: false,\n    checked: null,\n    lazy: true,\n};\n\nTCheckbox.displayName = 'TCheckbox';\n\n\nexport default TCheckbox;\n"],"names":["TCheckbox","forwardRef","props","ref","validator","useValidator","rootRef","useRef","useEffect","modifyStatus","status","setStatus","useState","useImperativeHandle","_a","getRootClass","clazz","getRootStyle","style","onClickCheckbox","emitChange","onBlur","onKeyDown","event","iconTemplate","iconType","jsx","TIcon","jsxs"],"mappings":"6KAMA,MAAAA,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,CAII,MAAAC,EAAAC,EAAAH,EAAA,MAAAA,EAAA,MAAAA,EAAA,cAAA,EACAI,EAAAC,SAAA,IAAA,EAEAC,EAAAA,UAAAC,EAAA,CAAAP,EAAA,MAAAA,EAAA,cAAAA,EAAA,QAAAA,EAAA,aAAA,CAAA,EACA,KAAA,CAAAQ,EAAAC,CAAA,EAAAC,EAAA,SAAA,SAAA,EAEAC,EAAA,oBAAAV,EAAA,KAAA,CAAgC,OAAA,QAClBW,EAAAR,GAAA,YAAAA,EAAA,UAAA,MAAAQ,EAAA,OAAwB,EAAG,UAAA,CACxB,OAAAV,EAAA,UAA0B,CAAG,EAAA,EAQ9C,SAAAW,GAAA,CACI,MAAAC,EAAA,CAAA,EAEA,OAAAd,EAAA,WAAqBc,EAAA,KAAAd,EAAA,SAAA,EACrBA,EAAA,UAAoBc,EAAA,KAAA,sBAAA,EACpBZ,EAAA,QAAuBY,EAAA,KAAA,qBAAA,EACvBZ,EAAA,QAAAA,EAAA,SAA2CY,EAAA,KAAA,qBAAA,EAE3CA,EAAA,KAAA,GAAA,CAAqB,CAGzB,SAAAC,GAAA,CACI,IAAAC,EAAA,CAAA,EAEA,OAAAhB,EAAA,QAAiBgB,EAAA,CAAA,GAAAhB,EAAA,QAEjBgB,CAAO,CAQX,SAAAC,GAAA,CACIC,GAAW,CAGf,SAAAC,GAAA,CACInB,EAAA,MACIE,EAAA,SAAA,CACJ,CAGJ,SAAAkB,EAAAC,EAAA,EACIA,EAAA,MAAA,SAAAA,EAAA,MAAA,OACIA,EAAA,eAAA,EACAH,IACJ,CAQJ,SAAAA,GAAA,CACI,OAAAlB,EAAA,UAAA,aAIAQ,IAAA,QACIR,EAAA,SAAAA,EAAA,cAAAA,EAAA,aAAA,EAEAA,EAAA,SAAAA,EAAA,aAAA,EACJ,CAIJ,SAAAO,GAAA,CACIP,EAAA,UAAA,GACIS,EAAA,OAAA,EAAiBT,EAAA,UAAA,GAEjBS,EAAA,SAAA,EAAmBT,EAAA,cAEnBS,EAAA,eAAA,EAAyBT,EAAA,QAAAA,EAAA,cAEzBS,EAAA,OAAA,EAEAA,EAAA,SAAA,CACJ,CAQJ,SAAAa,GAAA,CAEI,IAAAC,EACA,GAAAf,IAAA,gBACIe,EAAA,+BAAWf,IAAA,QAEXe,EAAA,qBAAWf,IAAA,WAAAR,EAAA,SAEXuB,EAAA,+BAAWf,IAAA,WAAA,CAAAR,EAAA,SAEXuB,EAAA,kBAEA,OAAA,MAAA,gBAAA,EAGJ,OAAAC,EAAAA,IAAAC,EAAA,CAAA,MAAA,GAAA,KAAA,SAAA,UAAA,sCAAAjB,CAAA,GAAA,SAAAe,CAAA,CAAA,CACsG,CAI1G,OAAAG,EAAA,KACI,MAAC,CAAA,IAAAtB,EAAS,UAAA,cAAAS,EAAA,CAAA,GACkC,MAAAE,EAAA,EACnB,SAAA,CAGrBW,EAAA,KAAA,MAAC,CAAA,UAAA,wBAAe,SAAA1B,EAAA,SAAA,GAAA,EACqB,QAAAE,EAAA,gBACb,OAAAiB,EACnB,UAAAC,EACA,QAAAH,EACS,SAAA,CACTK,EAAA,EAAaE,EAAA,IAAA,OAAA,CAAA,UAAA,oBAAA,SAAAxB,EAAA,SAAA,CACwC,CAAA,CAAA,EAC1DA,EAAA,OAAAwB,EAAA,IAAA,MAAA,CAAA,UAAA,sBAAA,SAAAtB,EAAA,QAAA,CAOI,CAAA,CAAA,CAQhB,CAAA,EAEAJ,EAAA,aAAA,CAAyB,cAAA,GACN,cAAA,GACA,QAAA,KACN,KAAA,EAEb,EAEAA,EAAA,YAAA"}