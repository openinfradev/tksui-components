{"version":3,"file":"TButtonGroup.stories-be65d5c6.js","sources":["../../src/components/button/button-group/TButtonGroup.tsx"],"sourcesContent":["import {CSSProperties, useCallback, useMemo} from 'react';\nimport TButton from '../button/TButton';\nimport {TButtonGroupProps, TButtonGroupValue} from './TButtonGroup.interface';\n\n\nconst TButtonGroup = (props: TButtonGroupProps) => {\n\n    // region [Styles]\n\n    const rootClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.className) { clazz.push(props.className); }\n        if (props.disabled) { clazz.push('t-button-group--disabled'); }\n        if (props.primary) { clazz.push('t-button-group--primary'); }\n\n        return clazz.join(' ');\n    }, [props.className, props.disabled, props.primary]);\n\n    const rootStyle = useMemo((): CSSProperties => {\n        let style: CSSProperties = {};\n\n        if (props.style) style = {...props.style};\n\n        return style;\n    }, [props.style]);\n\n    // endregion\n\n    // region [Privates]\n\n    const updateMultiSelectValue = useCallback((value: TButtonGroupValue, currentStatus: boolean) => {\n        if (currentStatus) {\n            const newValue = props.value.filter((val) => JSON.stringify(val) !== JSON.stringify(value));\n            props.onChange(newValue);\n        } else {\n            const newValue = props.value.concat(value);\n            props.onChange(newValue);\n        }\n        return value;\n    }, [props]);\n\n    const updateSingleSelectValue = useCallback((value: TButtonGroupValue) => {\n        props.onChange(value);\n    }, [props]);\n\n    const isActive = useCallback((value) => {\n        if (props.multiSelect) {\n            return props.value.some((val) => {\n                return JSON.stringify(val) === JSON.stringify(value);\n            });\n        }\n\n        if (typeof props.value === 'object') {\n            return JSON.stringify(props.value) === JSON.stringify(value);\n        }\n\n        return props.value === value;\n    }, [props.multiSelect, props.value]);\n\n    // endregion\n\n    // region [Events]\n\n    const onClickItem = useCallback((value: TButtonGroupValue, currentStatus: boolean) => {\n\n        if (props.multiSelect) {\n            updateMultiSelectValue(value, currentStatus);\n        } else {\n            updateSingleSelectValue(value);\n        }\n\n    }, [props.multiSelect, updateMultiSelectValue, updateSingleSelectValue]);\n\n    // endregion\n\n    return (\n        <div className={`t-button-group ${rootClass}`} style={rootStyle} data-testid={'button-group-root'}>\n            {\n                props.items.map((item, index) => {\n                    return (\n                        <TButton key={index}\n                                 small\n                                 primary={props.primary}\n                                 disabled={props.disabled}\n                                 main={isActive(item.value)}\n                                 onClick={() => onClickItem(item.value, isActive(item.value))}\n                        >{item.template}</TButton>\n                    );\n                })\n            }\n        </div>\n    );\n};\n\nTButtonGroup.displayName = 'TButtonGroup';\n\nTButtonGroup.defaultProps = {\n    primary: false,\n    disabled: false,\n};\n\n\nexport default TButtonGroup;\n"],"names":["TButtonGroup","props","rootClass","useMemo","clazz","rootStyle","style","updateMultiSelectValue","useCallback","value","currentStatus","newValue","val","updateSingleSelectValue","isActive","onClickItem","jsx","item","index","TButton"],"mappings":"0OAKA,MAAAA,EAAAC,GAAA,CAII,MAAAC,EAAAC,EAAAA,QAAA,IAAA,CACI,MAAAC,EAAA,CAAA,EAEA,OAAAH,EAAA,WAAuBG,EAAA,KAAAH,EAAA,SAAA,EACvBA,EAAA,UAAsBG,EAAA,KAAA,0BAAA,EACtBH,EAAA,SAAqBG,EAAA,KAAA,yBAAA,EAErBA,EAAA,KAAA,GAAA,CAAqB,EAAA,CAAAH,EAAA,UAAAA,EAAA,SAAAA,EAAA,OAAA,CAAA,EAGzBI,EAAAF,EAAAA,QAAA,IAAA,CACI,IAAAG,EAAA,CAAA,EAEA,OAAAL,EAAA,QAAiBK,EAAA,CAAA,GAAAL,EAAA,QAEjBK,CAAO,EAAA,CAAAL,EAAA,KAAA,CAAA,EAOXM,EAAAC,EAAAA,YAAA,CAAAC,EAAAC,IAAA,CACI,GAAAA,EAAA,CACI,MAAAC,EAAAV,EAAA,MAAA,OAAAW,GAAA,KAAA,UAAAA,CAAA,IAAA,KAAA,UAAAH,CAAA,CAAA,EACAR,EAAA,SAAAU,CAAA,CAAuB,KAAA,CAEvB,MAAAA,EAAAV,EAAA,MAAA,OAAAQ,CAAA,EACAR,EAAA,SAAAU,CAAA,CAAuB,CAE3B,OAAAF,CAAO,EAAA,CAAAR,CAAA,CAAA,EAGXY,EAAAL,cAAAC,GAAA,CACIR,EAAA,SAAAQ,CAAA,CAAoB,EAAA,CAAAR,CAAA,CAAA,EAGxBa,EAAAN,cAAAC,GACIR,EAAA,YACIA,EAAA,MAAA,KAAAW,GACI,KAAA,UAAAA,CAAA,IAAA,KAAA,UAAAH,CAAA,CAAmD,EAI3D,OAAAR,EAAA,OAAA,SACI,KAAA,UAAAA,EAAA,KAAA,IAAA,KAAA,UAAAQ,CAAA,EAGJR,EAAA,QAAAQ,EAAuB,CAAAR,EAAA,YAAAA,EAAA,KAAA,CAAA,EAO3Bc,EAAAP,EAAAA,YAAA,CAAAC,EAAAC,IAAA,CAEIT,EAAA,YACIM,EAAAE,EAAAC,CAAA,EAEAG,EAAAJ,CAAA,CACJ,EAAA,CAAAR,EAAA,YAAAM,EAAAM,CAAA,CAAA,EAMJ,OAAAG,EAAAA,IAAA,MAAA,CAAA,UAAA,kBAAAd,CAAA,GAAA,MAAAG,EAAA,cAAA,oBAAA,SAAAJ,EAAA,MAAA,IAAA,CAAAgB,EAAAC,IAIgBF,EAAA,IACIG,EAAC,CAAA,MAAA,GACa,QAAAlB,EAAA,QACU,SAAAA,EAAA,SACC,KAAAa,EAAAG,EAAA,KAAA,EACS,QAAA,IAAAF,EAAAE,EAAA,MAAAH,EAAAG,EAAA,KAAA,CAAA,EACkC,SAAAA,EAAA,QAC7D,EAAAC,CANO,CAME,CAAA,CAAA,CAMxC,EAEAlB,EAAA,YAAA,eAEAA,EAAA,aAAA,CAA4B,QAAA,GACf,SAAA,EAEb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}