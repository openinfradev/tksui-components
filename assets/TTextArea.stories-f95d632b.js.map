{"version":3,"file":"TTextArea.stories-f95d632b.js","sources":["../../src/components/input/text-area/TTextArea.tsx"],"sourcesContent":["import {CSSProperties, forwardRef, KeyboardEvent, Ref, useCallback, useImperativeHandle, useMemo, useRef, useState} from 'react';\nimport useValidator from '@/common/hook/UseValidator';\nimport {TTextAreaProps, TTextAreaRef} from './TTextArea.interface';\n\nconst TTextArea = forwardRef((props: TTextAreaProps, ref: Ref<TTextAreaRef>) => {\n\n    // region [Hooks]\n\n    const [hasFocus, setHasFocus] = useState<boolean>(false);\n\n    const validator = useValidator(props.value, props.rules, props.successMessage);\n\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    useImperativeHandle(ref, () => ({\n        focus() {\n            textareaRef?.current?.focus();\n        },\n        validate() {\n            return validator.validate();\n        },\n    }));\n\n    // endregion\n\n\n    // region [Events]\n\n    const onChange = useCallback((event): void => {\n\n        if (props.counter) {\n            if (event.target.value.length > props.counter) {\n                props.onChange(event.target.value.substring(0, props.counter));\n                return;\n            }\n        }\n        props.onChange(event.target.value);\n    }, [props]);\n\n    const onFocus = useCallback((): void => {\n        validator.clearValidation();\n        setHasFocus(true);\n    }, [validator]);\n\n    const onBlur = useCallback((): void => {\n        if (!props.lazy) { validator.validate(); }\n\n        setHasFocus(false);\n    }, [props.lazy, validator]);\n\n\n    const onKeyDown = useCallback((event: KeyboardEvent<HTMLTextAreaElement>): void => {\n        if (event.key === 'Enter' && props.onKeyDownEnter) {\n            props.onKeyDownEnter(event);\n        }\n\n        if (props.onKeyDown) {\n            props.onKeyDown(event);\n        }\n    }, [props]);\n\n\n    // endregion\n\n\n    // region [Templates]\n\n    const rootClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.className) clazz.push(props.className);\n\n        if (props.disabled) clazz.push('t-text-area--disabled');\n        if (!validator.result) clazz.push('t-text-area--failure');\n        if (hasFocus) { clazz.push('t-text-area--focused'); }\n        if (validator.result && validator.message) clazz.push('t-text-area--success');\n\n        clazz.push(`t-text-area--${props.type}`);\n\n        return clazz.join(' ');\n    }, [props.className, props.disabled, props.type, validator.result, validator.message, hasFocus]);\n\n    const labelClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.required) { clazz.push('t-text-area__label--required'); }\n\n        return clazz.join(' ');\n    }, [props.required]);\n\n    const rootStyle = useMemo((): CSSProperties => {\n        let style: CSSProperties = {};\n\n        if (props.style) style = {...props.style};\n        if (props.width) style = {...style, width: props.width};\n\n        return style;\n    }, [props.style, props.width]);\n\n\n    const textAreaClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.disabled) clazz.push('t-text-area__container__input--disabled');\n\n        return clazz.join(' ');\n    }, [props.disabled]);\n\n    const inputPlaceholder = useMemo((): string => {\n        if (props.label && !hasFocus) { return ''; }\n        if (props.disabled) { return ''; }\n\n        return props.placeholder;\n\n    }, [props.label, hasFocus, props.disabled, props.placeholder]);\n\n    // endregion\n\n\n    return (\n        <div className={`t-text-area ${rootClass}`} style={rootStyle}>\n            {\n                props.label && (\n                    <label className={`t-text-area__label ${labelClass}`}>\n                        {props.label}\n                    </label>\n                )\n            }\n            <div className={'t-text-area__container'}>\n                <textarea ref={textareaRef}\n                          tabIndex={props.disabled ? -1 : 0}\n                          className={`t-text-area__container__input ${textAreaClass}`}\n                          disabled={props.disabled}\n                          placeholder={inputPlaceholder}\n                          value={props.value}\n                          rows={props.rows}\n                          onChange={onChange}\n                          onKeyDown={onKeyDown}\n                          onBlur={onBlur}\n                          onFocus={onFocus}\n                />\n            </div>\n            <div className={'t-text-area__details'}>\n                <div className={'t-text-area__details__message'}>\n                    {\n                        validator.message\n                        && `${validator.message}`\n                    }\n                </div>\n                <div className={'t-text-area__details__counter'}>\n                    {\n                        props.counter && !props.disabled\n                        && `${props.value?.length} / ${props.counter}`\n                    }\n                </div>\n            </div>\n        </div>\n    );\n\n});\n\nTTextArea.defaultProps = {\n    type: 'outline',\n    rows: 5,\n    lazy: true,\n};\n\nTTextArea.displayName = 'TTextArea';\n\n\nexport default TTextArea;\n"],"names":["TTextArea","forwardRef","props","ref","hasFocus","setHasFocus","useState","validator","useValidator","textareaRef","useRef","useImperativeHandle","_a","onChange","useCallback","event","onFocus","onBlur","onKeyDown","rootClass","useMemo","clazz","labelClass","rootStyle","style","textAreaClass","inputPlaceholder","jsxs","jsx"],"mappings":"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"}