{"version":3,"file":"TPage.stories-d4100993.js","sources":["../../src/components/screen/page/TPage.tsx"],"sourcesContent":["import {MouseEvent, MouseEventHandler, useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport TIcon from '../../icon/TIcon';\nimport {TPageProps} from './TPage.interface';\n\nconst defaultPanelWidth = '360px';\n\nexport default function TPage(props: TPageProps) {\n\n    // region [Hooks]\n\n    const [isInfoPanelOpened, setIsInfoPanelOpened] = useState<boolean>(false);\n    const [isInfoPanelResizing, setIsInfoPanelResizing] = useState<boolean>(false);\n\n    const [panelWidth, setPanelWidth] = useState<string>(defaultPanelWidth);\n    const rootRef = useRef<HTMLDivElement>(null);\n\n\n    // endregion\n\n\n    // region [Events]\n\n    const onClickInfoClose = useCallback(() => {\n        setIsInfoPanelOpened(false);\n    }, []);\n\n\n    // TODO. info panel 별도 컴포넌트로 분리, 드래그 관련 기능 util로 분리, 너비 minmax 변수화\n    const onMouseDown = ((clickEvent: MouseEvent): void => {\n        clickEvent.stopPropagation();\n\n        const mouseMoveHandler = (mouseEvent): void => {\n            const width: number = window.innerWidth - mouseEvent.pageX;\n\n            setIsInfoPanelResizing(true);\n\n            if (width <= 700) {\n                const lnbWidth: number = rootRef.current.getBoundingClientRect().x;\n                setPanelWidth(`calc(100% - ${mouseEvent.pageX - lnbWidth}px)`);\n            }\n            if (width <= 200) {\n                setPanelWidth(defaultPanelWidth);\n                setIsInfoPanelOpened(false);\n                document.removeEventListener('mousemove', mouseMoveHandler);\n            }\n        };\n\n        const mouseUpHandler = () => {\n            document.removeEventListener('mousemove', mouseMoveHandler);\n            setIsInfoPanelResizing(false);\n        };\n\n        document.addEventListener('mousemove', mouseMoveHandler);\n        document.addEventListener('mouseup', mouseUpHandler, {once: true});\n    }) as MouseEventHandler;\n\n\n    // endregion\n\n\n    // region [Styles]\n\n    const rootClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.className) { clazz.push(props.className); }\n        if (isInfoPanelResizing) { clazz.push('t-page--resizing'); }\n\n        return clazz.join(' ');\n    }, [isInfoPanelResizing, props.className]);\n\n\n    const infoPanelClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (isInfoPanelOpened) {\n            clazz.push('t-page__information-area--visible');\n        } else {\n            clazz.push('t-page__information-area--invisible');\n        }\n\n        if (isInfoPanelResizing) { clazz.push('t-page__information-area--resizing'); }\n\n        return clazz.join(' ');\n    }, [isInfoPanelOpened, isInfoPanelResizing]);\n\n    // endregion\n\n\n    // region [Hooks - Lifecycles]\n\n    useEffect(() => {\n        if (isInfoPanelOpened) {\n            setIsInfoPanelOpened(true);\n            setIsInfoPanelResizing(false);\n        }\n    }, [isInfoPanelOpened]);\n\n    // endregion\n\n\n    return (\n        <div className={`t-page ${rootClass}`}\n             style={props.style}\n             ref={rootRef}>\n            <div className={'t-page__content-container'}>\n                <div className={'t-page__title-area'}>\n                    <h1>{props.title}</h1> {isInfoPanelOpened}\n\n                    {\n                        props.infoPanelContent && (\n                            <TIcon type={'outlined'}\n                                   small\n                                   clickable\n                                   onClick={() => { setIsInfoPanelOpened(!isInfoPanelOpened); }}>t_information</TIcon>\n                        )\n                    }\n                </div>\n\n                <article className={'t-page__content-area'}>\n                    {props.children}\n                </article>\n            </div>\n\n            {\n                props.infoPanelContent && (\n                    <div className={`t-page__information-area ${infoPanelClass}`}\n                         style={isInfoPanelOpened ? {flex: `0 0 ${panelWidth}`} : {}}>\n                        <div className={'t-page__information-area__resizer'}\n                             onMouseDown={onMouseDown}\n                        />\n                        <div className={'t-page__information-area__container'}>\n                            <div className={'t-page__information-area__header'}>\n                                <TIcon className={'t-page__information-area__header__close'}\n                                       clickable\n                                       onClick={onClickInfoClose}>close</TIcon>\n                            </div>\n                            <div className={'t-page__information-area__content'}>\n                                {props.infoPanelContent}\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n        </div>\n    );\n}\n"],"names":["defaultPanelWidth","TPage","props","isInfoPanelOpened","setIsInfoPanelOpened","useState","isInfoPanelResizing","setIsInfoPanelResizing","panelWidth","setPanelWidth","rootRef","useRef","onClickInfoClose","useCallback","onMouseDown","clickEvent","mouseMoveHandler","mouseEvent","width","lnbWidth","mouseUpHandler","rootClass","useMemo","clazz","infoPanelClass","useEffect","jsxs","jsx","TIcon"],"mappings":"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"}