{"version":3,"file":"TStepBox-53c3e61f.js","sources":["../../src/components/data-container/step-box/TStepBoxContext.ts","../../src/components/data-container/step-box/TStepBoxHeader.tsx","../../src/components/data-container/step-box/TStepBoxFooter.tsx","../../src/components/data-container/step-box/TStepBoxItem.tsx","../../src/components/data-container/step-box/TStepBox.tsx"],"sourcesContent":["import {createContext} from 'react';\nimport {TStepBoxValue} from './TStepBox.interface';\n\ntype stepBoxContext = {\n    totalStep: number,\n    currentStep: TStepBoxValue,\n    onChangeCurrentStep: (step: number) => void,\n    prevButtonLabel: string,\n    nextButtonLabel: string,\n    completeButtonLabel: string,\n}\n\nexport const tabBoxContext = createContext<stepBoxContext>(\n    {\n        totalStep: 0,\n        currentStep: 0,\n        onChangeCurrentStep: null,\n        prevButtonLabel: '',\n        nextButtonLabel: '',\n        completeButtonLabel: '',\n    },\n);\n\nexport default tabBoxContext;\n","import {Fragment, useCallback, useContext} from 'react';\nimport {TStepBoxHeaderProps} from './TStepBox.interface';\nimport TStepBoxContext from './TStepBoxContext';\nimport TIcon from '~/icon/TIcon';\n\nconst TStepBoxHeader = (props: TStepBoxHeaderProps) => {\n\n    // region [Hooks]\n\n    const context = useContext(TStepBoxContext);\n\n    // endregion\n\n\n    // region [Templates]\n\n    const numberClass = useCallback((stepNumber: number): string => {\n        const clazz: string[] = [];\n\n        if (stepNumber < context.currentStep) {\n            clazz.push('t-step-box-header__step__number--prev');\n        } else if (stepNumber === context.currentStep) {\n            clazz.push('t-step-box-header__step__number--current');\n        } else {\n            clazz.push('t-step-box-header__step__number--next');\n        }\n\n        return clazz.join(' ');\n    }, [context.currentStep]);\n\n    const connectorClass = useCallback((stepNumber: number): string => {\n        const clazz: string[] = [];\n\n        if (stepNumber < context.currentStep) {\n            clazz.push('t-step-box-header__connector--prev');\n        } else if (stepNumber === context.currentStep) {\n            clazz.push('t-step-box-header__connector--current');\n        } else {\n            clazz.push('t-step-box-header__connector--next');\n        }\n\n        return clazz.join(' ');\n    }, [context.currentStep]);\n\n    // endregion\n\n\n    // region [Events]\n\n\n    // endregion\n\n    return (\n\n        <ul className={'t-step-box-header'}>\n            {\n                props.content?.map((item, index) => {\n                    return (<Fragment key={index}>\n                        {\n                            (index > 0) && (\n                                <div className={`t-step-box-header__connector ${connectorClass(item.stepNumber)}`}/>\n                            )\n                        }\n\n                        <li key={item.stepNumber} className={'t-step-box-header__step'}>\n\n                            <div className={`t-step-box-header__step__number ${numberClass(item.stepNumber)}`}>\n                                {/* Number */}\n                                <div className={'t-step-box-header__step__number__inner'}>\n                                    {\n                                        (item.stepNumber < context.currentStep)\n                                            ? <TIcon size={'medium'}>t_done</TIcon>\n                                            : item.stepNumber\n                                    }\n                                </div>\n\n                                {/* Label */}\n                                <div className={'t-step-box-header__step__label'}>{item.label}</div>\n                            </div>\n\n                        </li>\n                    </Fragment>\n                    );\n                })\n            }\n        </ul>\n\n    );\n};\n\nTStepBoxHeader.defaultProps = {};\n\nTStepBoxHeader.displayName = 'TStepBox';\n\n\nexport default TStepBoxHeader;\n","import {useCallback, useContext, useMemo} from 'react';\nimport {TStepBoxFooterProps} from './TStepBox.interface';\nimport TButton from '~/button/button/TButton';\nimport TStepBoxContext from '~/data-container/step-box/TStepBoxContext';\n\nconst TStepBoxFooter = (props: TStepBoxFooterProps) => {\n\n    // region [Hooks]\n\n    const context = useContext(TStepBoxContext);\n\n    // endregion\n\n\n    // region [Privates]\n\n    const validateStep = useCallback(() => {\n        if (!props.validateStep) {\n            return true;\n        }\n\n        return props.validateStep();\n    }, [props]);\n\n\n    // endregion\n\n\n    // region [Events]\n\n    const onClickPrev = useCallback(() => {\n        context.onChangeCurrentStep(context.currentStep - 1);\n    }, [context]);\n\n    const onClickNext = useCallback(() => {\n        if (!validateStep()) {\n            return;\n        }\n\n        if (props.onClickNext) {\n            props.onClickNext();\n        }\n        if (context.currentStep < context.totalStep) {\n            context.onChangeCurrentStep(context.currentStep + 1);\n        }\n    }, [context, props, validateStep]);\n\n    // endregion\n\n    // region [Templates]\n\n    // endregion\n\n\n    return (\n        <div className={'t-step-box-footer'}>\n            <div className={'t-step-box-footer__left-action'}>\n                <TButton large disabled={context.currentStep === 1} onClick={onClickPrev}>{props.prevButtonLabel}</TButton>\n            </div>\n            <div className={'t-step-box-footer__right-action'}>\n                {\n                    props.customNextButton\n                        ? props.customNextButton\n                        : <TButton large onClick={onClickNext}>\n                            {\n                                (context.currentStep < context.totalStep)\n                                    ? props.nextButtonLabel\n                                    : props.completeButtonLabel\n                            }\n                        </TButton>\n                }\n            </div>\n        </div>\n    );\n};\n\n\nexport default TStepBoxFooter;\n","import {CSSProperties, useContext, useMemo} from 'react';\nimport {TStepBoxItemProps} from './TStepBox.interface';\nimport TStepBoxFooter from '~/data-container/step-box/TStepBoxFooter';\nimport TStepBoxContext from '~/data-container/step-box/TStepBoxContext';\n\nconst TStepBoxItem = (props: TStepBoxItemProps) => {\n\n    // region [Hooks]\n\n    const stepBoxContext = useContext(TStepBoxContext);\n\n    // endregion\n\n\n    // region [Styles]\n\n    const rootClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.className) { clazz.push(props.className); }\n\n        return clazz.join(' ');\n    }, [props.className]);\n\n    const rootStyle = useMemo((): CSSProperties => {\n        if (props.style) { return props.style; }\n        return {};\n    }, [props.style]);\n\n    // endregion\n\n\n    return (\n        <div className={`t-step-box-item ${rootClass}`} style={rootStyle}>\n            {props.children ?? props.children}\n\n            <TStepBoxFooter prevButtonLabel={props.prevButtonLabel ?? stepBoxContext.prevButtonLabel}\n                            nextButtonLabel={props.nextButtonLabel ?? stepBoxContext.nextButtonLabel}\n                            completeButtonLabel={props.completeButtonLabel ?? stepBoxContext.completeButtonLabel }\n                            customNextButton={props.customNextButton}\n                            validateStep={props.validateStep}\n                            onClickNext={props.onClickNext}\n                            onClickPrev={props.onClickPrev}\n            />\n\n        </div>\n    );\n};\n\nTStepBoxItem.displayName = 'TStepBoxItem';\n\n\nexport default TStepBoxItem;\n","import {CSSProperties, ReactElement, useMemo} from 'react';\nimport {TStepBoxProps} from './TStepBox.interface';\nimport TStepBoxContext from './TStepBoxContext';\nimport TStepBoxHeader from '~/data-container/step-box/TStepBoxHeader';\nimport TStepBoxItem from '~/data-container/step-box/TStepBoxItem';\n\nconst TStepBox = (props: TStepBoxProps) => {\n\n    // region [Hooks]\n\n    const {value, children, style, className} = props;\n\n    // endregion\n\n    const headerContent: {stepNumber: number, label: string | ReactElement}[] = useMemo(() => {\n\n        return props.stepLabels.map(\n            (item: string | ReactElement, index: number) => ({\n                stepNumber: index + 1,\n                label: item,\n            }),\n        );\n    }, [props.stepLabels]);\n\n    const stepItemContent = useMemo(\n        () => {\n            let content = null;\n\n            if (children?.length === undefined) {\n                if (!children) { // children 안들어옴\n                    return null;\n                }\n                content = children; // children 1개\n            } else { // children 2개 이상\n                content = children[value - 1];\n            }\n\n            if (!content.props.children) {\n                return content;\n            }\n\n            return (\n                <TStepBoxItem prevButtonLabel={props.prevButtonLabel}\n                              nextButtonLabel={props.nextButtonLabel}\n                              completeButtonLabel={props.completeButtonLabel}\n                              {...content.props}\n                />\n            );\n        },\n\n        [children, props.completeButtonLabel, props.nextButtonLabel, props.prevButtonLabel, value],\n    );\n\n\n    // region [Privates]\n\n\n    // endregion\n\n\n    // region [Templates]\n\n    const rootClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (className) { clazz.push(className); }\n\n        return clazz.join(' ');\n    }, [className]);\n\n    const rootStyle = useMemo((): CSSProperties => {\n        if (style) { return style; }\n        return {};\n    }, [style]);\n\n    // endregion\n\n    return (\n        <div className={`t-step-box ${rootClass}`} style={rootStyle}>\n            <TStepBoxContext.Provider value={{\n                currentStep: value,\n                totalStep: children?.length,\n                onChangeCurrentStep: props.onChange,\n                nextButtonLabel: props.nextButtonLabel,\n                prevButtonLabel: props.prevButtonLabel,\n                completeButtonLabel: props.completeButtonLabel,\n            }}>\n                {/* Header */}\n                <TStepBoxHeader content={headerContent}/>\n\n                {/* Content & Footer */}\n                {stepItemContent}\n            </TStepBoxContext.Provider>\n        </div>\n    );\n};\n\nTStepBox.defaultProps = {\n    prevButtonLabel: 'Previous',\n    nextButtonLabel: 'Next',\n    completeButtonLabel: 'Complete',\n};\n\nTStepBox.displayName = 'TStepBox';\n\n\nexport default TStepBox;\n"],"names":["tabBoxContext","createContext","TStepBoxHeader","props","context","useContext","TStepBoxContext","numberClass","useCallback","stepNumber","clazz","connectorClass","jsx","_a","item","index","jsxs","Fragment","TIcon","TStepBoxFooter","validateStep","onClickPrev","onClickNext","TButton","TStepBoxItem","stepBoxContext","rootClass","useMemo","rootStyle","TStepBox","value","children","style","className","headerContent","stepItemContent","content"],"mappings":"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"}