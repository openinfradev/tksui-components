{"version":3,"file":"TSearchBox.stories-903f0b47.js","sources":["../../src/components/data-container/search-box/TSearchBoxContext.ts","../../src/components/data-container/search-box/TSearchBox.tsx","../../src/components/data-container/search-box/TSearchBoxRow.tsx","../../src/components/data-container/search-box/TSearchBoxItem.tsx"],"sourcesContent":["import {createContext} from 'react';\nimport {TSearchBoxContextInterface} from './TSearchBox.interface';\n\nexport const searchBoxContext = createContext<TSearchBoxContextInterface>({\n    column: 2,\n    labelWidth: '500px',\n});\n\nexport default searchBoxContext;\n","import {CSSProperties, useCallback, useMemo} from 'react';\nimport TButton from '../../button/button/TButton';\nimport {TSearchBoxContextInterface, TSearchBoxProps} from './TSearchBox.interface';\nimport TSearchBoxContext from './TSearchBoxContext';\n\n\nfunction TSearchBox(props: TSearchBoxProps) {\n\n    // region [Hooks]\n\n    const searchBoxContext: TSearchBoxContextInterface = {column: props.column, labelWidth: props.labelWidth};\n\n    // endregion\n\n\n    // region [Styles]\n\n    const rootClass: string = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.className) clazz.push(props.className);\n\n        return clazz.join(' ');\n    }, [props.className]);\n\n    const rootStyle: CSSProperties = useMemo(() => {\n        let style: CSSProperties = {};\n\n        if (props.style) style = {...props.style};\n\n        return style;\n    }, [props.style]);\n\n    // endregion\n\n    // region [Events]\n\n    const onSearch = useCallback(() => {\n        props.onSearch();\n    }, [props]);\n\n    const onReset = useCallback(() => {\n        props.onReset();\n    }, [props]);\n\n    // endregion\n\n\n    // region [Templates]\n\n    return (\n        <fieldset role={'form'}\n                  className={`t-search-box ${rootClass}`}\n                  style={rootStyle}>\n            <legend className={'screen-reader-only'}>검색 조건</legend>\n\n            <div className={'t-search-box__content'}>\n                <TSearchBoxContext.Provider value={{...searchBoxContext}}>\n                    {props.children}\n                </TSearchBoxContext.Provider>\n            </div>\n\n            {\n                (props.onReset || props.onSearch) && (\n                    <div className={'t-search-box__action-bar'}>\n                        {props.onReset && (<TButton large primary onClick={onReset}>초기화</TButton>)}\n                        {props.onSearch && (<TButton large main onClick={onSearch}>조회</TButton>)}\n                    </div>\n                )\n            }\n\n        </fieldset>\n    );\n\n    // endregion\n\n\n}\n\nTSearchBox.defaultProps = {\n    column: 2,\n    labelWidth: '15%',\n};\n\nexport default TSearchBox;\n","import {CSSProperties, useCallback, useMemo} from 'react';\nimport {TFormRowProps} from '../form-box/TFormBox.interface';\n\nfunction TSearchBoxRow(props: TFormRowProps) {\n\n    // region [Styles]\n\n\n    const rootClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.className) clazz.push(props.className);\n\n        return clazz.join(' ');\n    }, [props.className]);\n\n    const rootStyle: CSSProperties = useMemo((): CSSProperties => {\n        let style: CSSProperties = {};\n\n        if (props.style) style = {...props.style};\n\n        return style;\n    }, [props.style]);\n\n    // endregion\n\n\n    // region [Templates]\n\n    return (\n        <div className={`t-search-box-row ${rootClass}`} style={rootStyle}>\n            {props.children}\n        </div>\n    );\n\n    // endregion\n\n\n}\n\nexport default TSearchBoxRow;\n","import {CSSProperties, useContext, useMemo} from 'react';\nimport {TFormItemProps} from '../form-box/TFormBox.interface';\nimport TSearchBoxContext from './TSearchBoxContext';\n\nfunction TSearchBoxItem(props: TFormItemProps) {\n\n    // region [Hooks]\n\n    const {column, labelWidth} = useContext(TSearchBoxContext);\n\n\n    // endregion\n\n\n    // region [Styles]\n\n    const rootClass = useMemo((): string => {\n        const clazz: string[] = [];\n\n        if (props.className) { clazz.push(props.className); }\n        if (props.required) { clazz.push('t-search-box-item--required'); }\n\n        return clazz.join(' ');\n    }, [props.className, props.required]);\n\n    const rootStyle = useMemo((): CSSProperties => {\n        let style: CSSProperties = {};\n\n        style.width = `calc(100% / ${column} * ${props.span || 1})`;\n        if (props.style) { style = {...props.style}; }\n\n        return style;\n    }, [column, props.span, props.style]);\n\n\n    const labelStyle = useMemo((): CSSProperties => {\n        const style: CSSProperties = {};\n\n        style.flex = `0 0 ${labelWidth}`;\n\n        return style;\n    }, [labelWidth]);\n\n    // endregion\n\n\n    // region [Templates]\n\n    return (\n        <span className={`t-search-box-item ${rootClass}`}\n              role={'group'}\n              style={rootStyle}>\n            {\n                props.label && (\n                    <label className={'t-search-box-item__label'}\n                           style={labelStyle}>\n                        {props.label}\n                    </label>\n                )\n            }\n            <div className={'t-search-box-item__content'}> {props.children} </div>\n        </span>\n    );\n\n    // endregion\n\n\n}\n\nexport default TSearchBoxItem;\n"],"names":["searchBoxContext","createContext","TSearchBox","props","rootClass","useMemo","clazz","rootStyle","style","onSearch","useCallback","onReset","jsxs","jsx","TSearchBoxContext","TButton","TSearchBoxRow","TSearchBoxItem","column","labelWidth","useContext","labelStyle"],"mappings":"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"}