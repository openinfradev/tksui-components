{"version":3,"file":"TBadge.stories-40445fbe.js","sources":["../../src/components/guide/badge/TBadge.tsx"],"sourcesContent":["import 'react-toastify/dist/ReactToastify.css';\nimport {CSSProperties, useMemo} from 'react';\nimport {TBadgeProps} from './TBadge.interface';\n\nconst TBadge = (props: TBadgeProps) => {\n\n\n    // region [Styles]\n    const rootStyle = useMemo((): CSSProperties => {\n\n        let style: CSSProperties = {};\n\n        if (props.style) style = {...style, ...props.style};\n\n        return style;\n    }, [props.style]);\n\n    const rootClass = useMemo(() => {\n        const clazz = [];\n\n        if (props.className) { clazz.push(props.className); }\n\n        return clazz.join(' ');\n    }, [props.className]);\n\n\n    const badgeClass = useMemo(() => {\n        const clazz = [];\n\n        if (props.dot) {\n            clazz.push('t-badge-content--dot');\n        } else {\n            clazz.push('t-badge-content--detail');\n        }\n        if (props.inline) {\n            clazz.push('t-badge-content--inline');\n        }\n\n        return clazz.join(' ');\n    }, [props.dot, props.inline]);\n\n    const badgeStyle = useMemo((): CSSProperties => {\n\n        let style: CSSProperties = {};\n\n        if (props.color) style = {...style, backgroundColor: props.color};\n\n        return style;\n    }, [props.color]);\n\n\n    const badgeContent = useMemo(() => {\n        if (props.max && props.content > props.max) {\n            return `${props.max}+`;\n        }\n        return `${props.content}`;\n\n    }, [props.content, props.max]);\n\n    // endregion\n\n\n    return (\n        <div className={`t-badge ${rootClass}`} style={rootStyle}>\n            {props.children && props.children}\n\n            {\n                (props.content > 0 || (props.content === 0 && props.showZero)) && (\n                    <div className={`t-badge-content ${badgeClass}`} style={badgeStyle}>\n                        {!props.dot && badgeContent}\n                    </div>\n\n                )\n            }\n        </div>\n    );\n};\n\nTBadge.defaultProps = {};\n\nexport default TBadge;\n"],"names":["TBadge","props","rootStyle","useMemo","style","rootClass","clazz","badgeClass","badgeStyle","badgeContent","jsxs","jsx"],"mappings":"2RAIA,MAAAA,EAAAC,GAAA,CAII,MAAAC,EAAAC,EAAAA,QAAA,IAAA,CAEI,IAAAC,EAAA,CAAA,EAEA,OAAAH,EAAA,QAAiBG,EAAA,CAAA,GAAAA,EAAA,GAAAH,EAAA,KAAA,GAEjBG,CAAO,EAAA,CAAAH,EAAA,KAAA,CAAA,EAGXI,EAAAF,EAAAA,QAAA,IAAA,CACI,MAAAG,EAAA,CAAA,EAEA,OAAAL,EAAA,WAAuBK,EAAA,KAAAL,EAAA,SAAA,EAEvBK,EAAA,KAAA,GAAA,CAAqB,EAAA,CAAAL,EAAA,SAAA,CAAA,EAIzBM,EAAAJ,EAAAA,QAAA,IAAA,CACI,MAAAG,EAAA,CAAA,EAEA,OAAAL,EAAA,IACIK,EAAA,KAAA,sBAAA,EAEAA,EAAA,KAAA,yBAAA,EAEJL,EAAA,QACIK,EAAA,KAAA,yBAAA,EAGJA,EAAA,KAAA,GAAA,CAAqB,EAAA,CAAAL,EAAA,IAAAA,EAAA,MAAA,CAAA,EAGzBO,EAAAL,EAAAA,QAAA,IAAA,CAEI,IAAAC,EAAA,CAAA,EAEA,OAAAH,EAAA,QAAiBG,EAAA,CAAA,GAAAA,EAAA,gBAAAH,EAAA,KAAA,GAEjBG,CAAO,EAAA,CAAAH,EAAA,KAAA,CAAA,EAIXQ,EAAAN,EAAAA,QAAA,IACIF,EAAA,KAAAA,EAAA,QAAAA,EAAA,IACI,GAAAA,EAAA,GAAA,IAEJ,GAAAA,EAAA,OAAA,GAAuB,CAAAA,EAAA,QAAAA,EAAA,GAAA,CAAA,EAO3B,OAAAS,OAAA,MAAA,CAAA,UAAA,WAAAL,CAAA,GAAA,MAAAH,EAAA,SAAA,CAESD,EAAA,UAAAA,EAAA,UAAwBA,EAAA,QAAA,GAAAA,EAAA,UAAA,GAAAA,EAAA,WAAAU,EAAA,IAAA,MAAA,CAAA,UAAA,mBAAAJ,CAAA,GAAA,MAAAC,EAAA,SAAA,CAAAP,EAAA,KAAAQ,EAAA,CAMjB,CAAA,CAAA,CAMpB,EAEAT,EAAA,aAAA,CAAA;;;;"}