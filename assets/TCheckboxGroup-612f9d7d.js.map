{"version":3,"file":"TCheckboxGroup-612f9d7d.js","sources":["../../src/components/input/checkbox-group/TCheckboxGroup.tsx"],"sourcesContent":["import {CSSProperties, forwardRef, Ref, useImperativeHandle, useRef} from 'react';\nimport useValidator from '@/common/hook/UseValidator';\nimport {TCheckboxGroupProps, TCheckboxGroupRef, TCheckboxGroupValue} from './TCheckboxGroup.interface';\nimport TCheckbox from '../checkbox/TCheckbox';\nimport {TCheckboxValue} from '../checkbox/TCheckbox.interface';\n\n\nconst TCheckboxGroup = forwardRef((props: TCheckboxGroupProps, ref: Ref<TCheckboxGroupRef>) => {\n    \n    // region [Hooks]\n    \n    const validator = useValidator(props.value, props.rules, props.successMessage);\n    const rootRef = useRef<HTMLDivElement>(null);\n    \n    \n    useImperativeHandle(ref, () => ({\n        validate() { return validator.validate(); },\n    }));\n    \n    // endregion\n    \n    \n    // region [Styles]\n    \n    function getRootClass(): string {\n        const clazz: string[] = [];\n        \n        if (props.className) clazz.push(props.className);\n        if (props.disabled) clazz.push('t-checkbox-group--disabled');\n        if (!validator.result) clazz.push('t-checkbox-group--failure');\n        if (validator.result && validator.message) clazz.push('t-checkbox-group--success');\n        \n        return clazz.join(' ');\n    }\n    \n    function getRootStyle(): CSSProperties {\n        let style: CSSProperties = {};\n        \n        if (props.style) style = {...props.style};\n        \n        return style;\n    }\n    \n    // endregion\n    \n    \n    // region [Events]\n    function onChangeChildren(value, positiveValue): void {\n        \n        if (value === null) {\n            removeValue(positiveValue);\n        } else {\n            addValue(value);\n        }\n    }\n    \n    function onFocus(): void {\n        if (props.rules) {\n            validator.clearValidation();\n        }\n    }\n    \n    function onBlur(event): void {\n        const next = event.relatedTarget;\n        \n        if (props.rules && !props.lazy && !rootRef.current.contains(next)) {\n            validator.validate();\n        }\n    }\n    \n    // endregion\n    \n    \n    // region [ETC]\n    \n    function removeValue(value: TCheckboxValue) {\n        \n        \n        emitChange(props.value.filter((v) => v !== value));\n        \n    }\n    \n    function addValue(value: TCheckboxValue) {\n        emitChange([...props.value, value]);\n    }\n    \n    function emitChange(value: TCheckboxGroupValue): void {\n        props.onChange(value);\n    }\n    \n    \n    // endregion\n    \n    \n    // region [Templates]\n    \n    return (\n        <div className={`t-checkbox-group ${getRootClass()}`}\n             style={getRootStyle()}\n             ref={rootRef}\n             tabIndex={props.disabled ? -1 : 0}\n             onFocus={onFocus}\n             onBlur={onBlur}\n        >\n            <div className={'t-checkbox-group__container'}>\n                {\n                    props.items.map((item, index) => (\n                        <TCheckbox key={index}\n                                   positiveValue={item[props.valueKey]}\n                                   negativeValue={null}\n                                   value={props.value.some((v) => v === item[props.valueKey]) ? item[props.valueKey] : null}\n                                   onChange={onChangeChildren}\n                                   disabled={props.disabled || item.disabled}>\n                            {props.labelTemplate ? props.labelTemplate(item) : item[props.textKey]}\n                        </TCheckbox>\n                    ))\n                }\n            </div>\n            {\n                props.rules\n                && <div className={'t-checkbox-group__message'}>{validator.message}</div>\n            }\n        </div>\n    );\n    \n    // endregion\n    \n    \n});\n\nTCheckboxGroup.defaultProps = {\n    textKey: 'text',\n    valueKey: 'value',\n    lazy: true,\n};\n\nTCheckboxGroup.displayName = 'TCheckboxGroup';\n\n\nexport default TCheckboxGroup;\n"],"names":["TCheckboxGroup","forwardRef","props","ref","validator","useValidator","rootRef","useRef","useImperativeHandle","getRootClass","clazz","getRootStyle","style","onChangeChildren","value","positiveValue","removeValue","addValue","onFocus","onBlur","event","next","emitChange","v","jsxs","jsx","item","index","TCheckbox"],"mappings":"iLAOA,MAAAA,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,CAII,MAAAC,EAAAC,EAAAH,EAAA,MAAAA,EAAA,MAAAA,EAAA,cAAA,EACAI,EAAAC,SAAA,IAAA,EAGAC,EAAA,oBAAAL,EAAA,KAAA,CAAgC,UAAA,CACf,OAAAC,EAAA,UAA0B,CAAG,EAAA,EAQ9C,SAAAK,GAAA,CACI,MAAAC,EAAA,CAAA,EAEA,OAAAR,EAAA,WAAqBQ,EAAA,KAAAR,EAAA,SAAA,EACrBA,EAAA,UAAoBQ,EAAA,KAAA,4BAAA,EACpBN,EAAA,QAAuBM,EAAA,KAAA,2BAAA,EACvBN,EAAA,QAAAA,EAAA,SAA2CM,EAAA,KAAA,2BAAA,EAE3CA,EAAA,KAAA,GAAA,CAAqB,CAGzB,SAAAC,GAAA,CACI,IAAAC,EAAA,CAAA,EAEA,OAAAV,EAAA,QAAiBU,EAAA,CAAA,GAAAV,EAAA,QAEjBU,CAAO,CAOX,SAAAC,EAAAC,EAAAC,EAAA,CAEID,IAAA,KACIE,EAAAD,CAAA,EAEAE,EAAAH,CAAA,CACJ,CAGJ,SAAAI,GAAA,CACIhB,EAAA,OACIE,EAAA,gBAAA,CACJ,CAGJ,SAAAe,EAAAC,EAAA,CACI,MAAAC,EAAAD,EAAA,cAEAlB,EAAA,OAAA,CAAAA,EAAA,MAAA,CAAAI,EAAA,QAAA,SAAAe,CAAA,GACIjB,EAAA,SAAA,CACJ,CAQJ,SAAAY,EAAAF,EAAA,CAGIQ,EAAApB,EAAA,MAAA,OAAAqB,GAAAA,IAAAT,CAAA,CAAA,CAAiD,CAIrD,SAAAG,EAAAH,EAAA,CACIQ,EAAA,CAAA,GAAApB,EAAA,MAAAY,CAAA,CAAA,CAAkC,CAGtC,SAAAQ,EAAAR,EAAA,CACIZ,EAAA,SAAAY,CAAA,CAAoB,CASxB,OAAAU,EAAA,KACI,MAAC,CAAA,UAAA,oBAAAf,EAAA,CAAA,GAAiD,MAAAE,EAAA,EACzB,IAAAL,EACf,SAAAJ,EAAA,SAAA,GAAA,EAC2B,QAAAgB,EAChC,OAAAC,EACA,SAAA,CAEDM,EAAAA,IAAA,MAAA,CAAA,UAAA,8BAAA,SAAAvB,EAAA,MAAA,IAAA,CAAAwB,EAAAC,IAAAF,EAAA,IAGYG,EAAC,CAAA,cAAAF,EAAAxB,EAAA,QAAA,EAC4C,cAAA,KACnB,MAAAA,EAAA,MAAA,KAAA,GAAA,IAAAwB,EAAAxB,EAAA,QAAA,CAAA,EAAAwB,EAAAxB,EAAA,QAAA,EAAA,KACqE,SAAAW,EAC1E,SAAAX,EAAA,UAAAwB,EAAA,SACuB,SAAAxB,EAAA,cAAAA,EAAA,cAAAwB,CAAA,EAAAA,EAAAxB,EAAA,OAAA,CAC6B,EAAAyB,CANzD,CAAA,EAAA,EAU5BzB,EAAA,OAAAuB,EAAA,IAAA,MAAA,CAAA,UAAA,4BAAA,SAAArB,EAAA,QAAA,CAGuE,CAAA,CAAA,CAQnF,CAAA,EAEAJ,EAAA,aAAA,CAA8B,QAAA,OACjB,SAAA,QACC,KAAA,EAEd,EAEAA,EAAA,YAAA"}