{"version":3,"file":"TRadioGroup.stories-3f87e949.js","sources":["../../src/components/input/radio/TRadio.tsx","../../src/components/input/radio-group/TRadioGroup.tsx"],"sourcesContent":["import {CSSProperties, KeyboardEvent} from 'react';\nimport TIcon from '../../icon/TIcon';\nimport {TRadioProps} from './TRadio.interface';\n\n\nfunction TRadio(props: TRadioProps) {\n    \n    \n    // region [Styles]\n    \n    function getRootClass(): string {\n        const clazz: string[] = [];\n        \n        if (props.className) clazz.push(props.className);\n        if (props.disabled) clazz.push('t-radio--disabled');\n        \n        return clazz.join(' ');\n    }\n    \n    function getRootStyle(): CSSProperties {\n        let style: CSSProperties = {};\n        \n        if (props.style) style = {...props.style};\n        \n        return style;\n    }\n    \n    // endregion\n    \n    \n    // region [Events]\n    \n    function onClickRadio(): void {\n        if (props.disabled) return;\n        emitSelect();\n    }\n    \n    function onKeyDown(event: KeyboardEvent): void {\n        if (props.disabled) return;\n        if (event.key === 'Enter' || event.key === ' ') {\n            emitSelect();\n        }\n    }\n    \n    // endregion\n    \n    \n    // region [ETC]\n    \n    function emitSelect(): void {\n        props.onSelect(props.positiveValue);\n    }\n    \n    // endregion\n    \n    \n    // region [Templates]\n    \n    function iconTemplate(): JSX.Element {\n\n        const status = props.selected ? 'selected' : 'deselected';\n\n        let iconType: string;\n\n        if (props.selected) {\n            iconType = 't_radio_on';\n        } else if (props.disabled) {\n            iconType = 't_radio_disabled_off'\n        } else {\n            iconType = 't_radio_off'\n        }\n\n\n        \n        \n        return (\n            <TIcon small className={`t-radio__icon t-radio__icon--${status}`}>\n                {iconType}\n            </TIcon>\n        );\n    }\n    \n    return (\n        <div className={`t-radio ${getRootClass()}`}\n             style={getRootStyle()}>\n            \n            {/* Main */}\n            <div className={'t-radio__container'}\n                 tabIndex={props.disabled ? -1 : 0}\n                 onKeyDown={onKeyDown}\n                 onClick={onClickRadio}>\n                {iconTemplate()}\n                <span className={'t-radio__label'}>{props.children}</span>\n            </div>\n        </div>\n    );\n    \n    // endregion\n}\n\nTRadio.defaultProps = {};\n\nTRadio.displayName = 'TRadio';\n\n\nexport default TRadio;\n","import {CSSProperties, forwardRef, Ref, useImperativeHandle, useRef} from 'react';\nimport useValidator from '@/common/hook/UseValidator';\n\n\nimport TRadio from '../radio/TRadio';\nimport {TRadioGroupProps, TRadioGroupRef, TRadioGroupValue} from './TRadioGroup.interface';\nimport {TRadioValue} from '../radio/TRadio.interface';\n\n\nconst TRadioGroup = forwardRef((props: TRadioGroupProps, ref: Ref<TRadioGroupRef>) => {\n    \n    // region [Hooks]\n    \n    const validator = useValidator(props.value, props.rules, props.successMessage);\n    const rootRef = useRef<HTMLDivElement>(null);\n    \n    \n    useImperativeHandle(ref, () => ({\n        validate() { return validator.validate(); },\n    }));\n    \n    // endregion\n    \n    \n    // region [Styles]\n    \n    function getRootClass(): string {\n        const clazz: string[] = [];\n        \n        if (props.className) clazz.push(props.className);\n        if (props.disabled) clazz.push('t-radio-group--disabled');\n        if (!validator.result) clazz.push('t-radio-group--failure');\n        if (validator.result && validator.message) clazz.push('t-radio-group--success');\n        \n        return clazz.join(' ');\n    }\n    \n    function getRootStyle(): CSSProperties {\n        let style: CSSProperties = {};\n        \n        if (props.style) style = {...props.style};\n        \n        return style;\n    }\n    \n    // endregion\n    \n    \n    // region [Events]\n    \n    function onSelectRadio(value: TRadioValue): void {\n        \n        emitChange(value);\n    }\n    \n    function onFocus(): void {\n        if (props.rules) {\n            validator.clearValidation();\n        }\n    }\n    \n    function onBlur(event): void {\n        const next = event.relatedTarget;\n        \n        if (props.rules && !props.lazy && !rootRef.current.contains(next)) {\n            validator.validate();\n        }\n    }\n    \n    // endregion\n    \n    \n    // region [ETC]\n    \n    \n    function emitChange(value: TRadioGroupValue): void {\n        props.onChange(value);\n    }\n    \n    \n    // endregion\n    \n    \n    // region [Templates]\n    \n    return (\n        <div className={`t-radio-group ${getRootClass()}`}\n             style={getRootStyle()}\n             ref={rootRef}\n             tabIndex={props.disabled ? -1 : 0}\n             onFocus={onFocus}\n             onBlur={onBlur}>\n            <div className={'t-radio-group__container'}>\n                {\n                    props.items.map((item, index) => (\n                        <TRadio key={index}\n                                positiveValue={item[props.valueKey]}\n                                selected={props.value === item[props.valueKey]}\n                                disabled={props.disabled || item.disabled}\n                                onSelect={onSelectRadio}\n                        >\n                            \n                            {props.labelTemplate ? props.labelTemplate(item) : item[props.textKey]}\n                        </TRadio>\n                    ))\n                }\n            </div>\n            {\n                props.rules\n                && <div className={'t-radio-group__message'}>{validator.message}</div>\n            }\n        </div>\n    );\n    \n    // endregion\n    \n    \n});\n\nTRadioGroup.defaultProps = {\n    textKey: 'text',\n    valueKey: 'value',\n    lazy: true,\n};\n\nTRadioGroup.displayName = 'TRadioGroup';\n\n\nexport default TRadioGroup;\n"],"names":["TRadio","props","getRootClass","clazz","getRootStyle","style","onClickRadio","emitSelect","onKeyDown","event","iconTemplate","status","iconType","jsx","TIcon","jsxs","TRadioGroup","forwardRef","ref","validator","useValidator","rootRef","useRef","useImperativeHandle","onSelectRadio","value","emitChange","onFocus","onBlur","next","item","index"],"mappings":"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"}